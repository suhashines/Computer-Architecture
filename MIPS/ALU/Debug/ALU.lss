
ALU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000114  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005f9  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000552  00000000  00000000  000007fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000288  00000000  00000000  00000d4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00000fd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000327  00000000  00000000  0000101c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000139  00000000  00000000  00001343  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000147c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 88 00 	jmp	0x110	; 0x110 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

int main(void)
{
	
	
	DDRA = 0x00;
  6c:	1a ba       	out	0x1a, r1	; 26
	DDRB = 0x00;
  6e:	17 ba       	out	0x17, r1	; 23
	DDRC = 0xFF;
  70:	8f ef       	ldi	r24, 0xFF	; 255
  72:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xFF;
  74:	81 bb       	out	0x11, r24	; 17
	//SPI_SlaveInit();
	
	unsigned char answer = 0;
  76:	20 e0       	ldi	r18, 0x00	; 0
		
		 isZero = answer==0? 1:0 ;
		 
		answer &= 0x0F ;
		
		answer = (isZero<<4) | answer ;
  78:	51 e0       	ldi	r21, 0x01	; 1
  7a:	40 e0       	ldi	r20, 0x00	; 0
  7c:	70 e0       	ldi	r23, 0x00	; 0
  7e:	60 e0       	ldi	r22, 0x00	; 0
	unsigned char isZero =0 ;
	
    while (1){		
		//while((SPSR & (1<<SPIF)) == 0);
		//unsigned char operand = SPI_SlaveReceive();
		unsigned char operand = PINB;
  80:	86 b3       	in	r24, 0x16	; 22
		PORTC = operand;
  82:	85 bb       	out	0x15, r24	; 21
		
		unsigned char lowerNibble = (operand & 0x0F);
  84:	38 2f       	mov	r19, r24
  86:	3f 70       	andi	r19, 0x0F	; 15
		unsigned char upperNibble = (operand >> 4);
  88:	82 95       	swap	r24
  8a:	8f 70       	andi	r24, 0x0F	; 15
					
		if(PINA == 0b00000000){ // add : 000
  8c:	99 b3       	in	r25, 0x19	; 25
  8e:	91 11       	cpse	r25, r1
  90:	03 c0       	rjmp	.+6      	; 0x98 <main+0x2c>
			answer = (upperNibble + lowerNibble);
  92:	23 2f       	mov	r18, r19
  94:	28 0f       	add	r18, r24
  96:	2c c0       	rjmp	.+88     	; 0xf0 <main+0x84>
		}
		else if(PINA == 0b00000001){ // sub : 001
  98:	99 b3       	in	r25, 0x19	; 25
  9a:	91 30       	cpi	r25, 0x01	; 1
  9c:	19 f4       	brne	.+6      	; 0xa4 <main+0x38>
			answer = (upperNibble - lowerNibble);
  9e:	28 2f       	mov	r18, r24
  a0:	23 1b       	sub	r18, r19
  a2:	26 c0       	rjmp	.+76     	; 0xf0 <main+0x84>
		}
		else if(PINA == 0b00000010){ // and : 010
  a4:	99 b3       	in	r25, 0x19	; 25
  a6:	92 30       	cpi	r25, 0x02	; 2
  a8:	19 f4       	brne	.+6      	; 0xb0 <main+0x44>
			answer = (upperNibble & lowerNibble);
  aa:	23 2f       	mov	r18, r19
  ac:	28 23       	and	r18, r24
  ae:	20 c0       	rjmp	.+64     	; 0xf0 <main+0x84>
		}
		else if(PINA == 0b00000011){ // or : 011
  b0:	99 b3       	in	r25, 0x19	; 25
  b2:	93 30       	cpi	r25, 0x03	; 3
  b4:	19 f4       	brne	.+6      	; 0xbc <main+0x50>
			answer = (upperNibble | lowerNibble);
  b6:	23 2f       	mov	r18, r19
  b8:	28 2b       	or	r18, r24
  ba:	1a c0       	rjmp	.+52     	; 0xf0 <main+0x84>
		}
		else if(PINA == 0b00000100){ // nor : 100
  bc:	99 b3       	in	r25, 0x19	; 25
  be:	94 30       	cpi	r25, 0x04	; 4
  c0:	21 f4       	brne	.+8      	; 0xca <main+0x5e>
			answer = ~(upperNibble | lowerNibble);
  c2:	83 2b       	or	r24, r19
  c4:	28 2f       	mov	r18, r24
  c6:	20 95       	com	r18
  c8:	13 c0       	rjmp	.+38     	; 0xf0 <main+0x84>
		}
		else if(PINA == 0b00000101){ // sll : 101
  ca:	99 b3       	in	r25, 0x19	; 25
  cc:	95 30       	cpi	r25, 0x05	; 5
  ce:	31 f4       	brne	.+12     	; 0xdc <main+0x70>
			answer = (upperNibble << lowerNibble);
  d0:	28 2f       	mov	r18, r24
  d2:	01 c0       	rjmp	.+2      	; 0xd6 <main+0x6a>
  d4:	22 0f       	add	r18, r18
  d6:	3a 95       	dec	r19
  d8:	ea f7       	brpl	.-6      	; 0xd4 <main+0x68>
  da:	0a c0       	rjmp	.+20     	; 0xf0 <main+0x84>
		}
		else if(PINA == 0b00000110){ // srl : 110
  dc:	99 b3       	in	r25, 0x19	; 25
  de:	96 30       	cpi	r25, 0x06	; 6
  e0:	39 f4       	brne	.+14     	; 0xf0 <main+0x84>
			answer = (upperNibble >> lowerNibble);
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	02 c0       	rjmp	.+4      	; 0xea <main+0x7e>
  e6:	95 95       	asr	r25
  e8:	87 95       	ror	r24
  ea:	3a 95       	dec	r19
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <main+0x7a>
  ee:	28 2f       	mov	r18, r24
		
		 isZero = answer==0? 1:0 ;
		 
		answer &= 0x0F ;
		
		answer = (isZero<<4) | answer ;
  f0:	85 2f       	mov	r24, r21
  f2:	94 2f       	mov	r25, r20
  f4:	22 23       	and	r18, r18
  f6:	11 f0       	breq	.+4      	; 0xfc <main+0x90>
  f8:	87 2f       	mov	r24, r23
  fa:	96 2f       	mov	r25, r22
  fc:	82 95       	swap	r24
  fe:	92 95       	swap	r25
 100:	90 7f       	andi	r25, 0xF0	; 240
 102:	98 27       	eor	r25, r24
 104:	80 7f       	andi	r24, 0xF0	; 240
 106:	98 27       	eor	r25, r24
 108:	2f 70       	andi	r18, 0x0F	; 15
 10a:	28 2b       	or	r18, r24
		
		PORTD = answer ;
 10c:	22 bb       	out	0x12, r18	; 18
		
		//_delay_ms(500);
	}
 10e:	b8 cf       	rjmp	.-144    	; 0x80 <main+0x14>

00000110 <_exit>:
 110:	f8 94       	cli

00000112 <__stop_program>:
 112:	ff cf       	rjmp	.-2      	; 0x112 <__stop_program>
