
Control and Register.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001344  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00001344  000013d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  00800078  00800078  000013f0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000013f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000144c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00001488  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f86  00000000  00000000  000015b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000082f  00000000  00000000  0000353e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ef1  00000000  00000000  00003d6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002ec  00000000  00000000  00004c60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000063f  00000000  00000000  00004f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000116b  00000000  00000000  0000558b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  000066f6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e4       	ldi	r30, 0x44	; 68
      68:	f3 e1       	ldi	r31, 0x13	; 19
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 39       	cpi	r26, 0x90	; 144
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 14 04 	call	0x828	; 0x828 <main>
      8a:	0c 94 a0 09 	jmp	0x1340	; 0x1340 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <pinChange>:
uint16_t readRegister(uint16_t regAddress){
	return registers[regAddress];
}

void writeRegister(uint16_t regAddress, uint16_t data){
	registers[regAddress] = data;
      92:	67 2b       	or	r22, r23
      94:	09 f0       	breq	.+2      	; 0x98 <pinChange+0x6>
      96:	9f c0       	rjmp	.+318    	; 0x1d6 <pinChange+0x144>
      98:	00 97       	sbiw	r24, 0x00	; 0
      9a:	11 f4       	brne	.+4      	; 0xa0 <pinChange+0xe>
      9c:	d8 98       	cbi	0x1b, 0	; 27
      9e:	08 95       	ret
      a0:	81 30       	cpi	r24, 0x01	; 1
      a2:	91 05       	cpc	r25, r1
      a4:	11 f4       	brne	.+4      	; 0xaa <pinChange+0x18>
      a6:	d9 98       	cbi	0x1b, 1	; 27
      a8:	08 95       	ret
      aa:	82 30       	cpi	r24, 0x02	; 2
      ac:	91 05       	cpc	r25, r1
      ae:	11 f4       	brne	.+4      	; 0xb4 <pinChange+0x22>
      b0:	da 98       	cbi	0x1b, 2	; 27
      b2:	08 95       	ret
      b4:	83 30       	cpi	r24, 0x03	; 3
      b6:	91 05       	cpc	r25, r1
      b8:	11 f4       	brne	.+4      	; 0xbe <pinChange+0x2c>
      ba:	db 98       	cbi	0x1b, 3	; 27
      bc:	08 95       	ret
      be:	84 30       	cpi	r24, 0x04	; 4
      c0:	91 05       	cpc	r25, r1
      c2:	11 f4       	brne	.+4      	; 0xc8 <pinChange+0x36>
      c4:	dc 98       	cbi	0x1b, 4	; 27
      c6:	08 95       	ret
      c8:	85 30       	cpi	r24, 0x05	; 5
      ca:	91 05       	cpc	r25, r1
      cc:	11 f4       	brne	.+4      	; 0xd2 <pinChange+0x40>
      ce:	dd 98       	cbi	0x1b, 5	; 27
      d0:	08 95       	ret
      d2:	86 30       	cpi	r24, 0x06	; 6
      d4:	91 05       	cpc	r25, r1
      d6:	11 f4       	brne	.+4      	; 0xdc <pinChange+0x4a>
      d8:	de 98       	cbi	0x1b, 6	; 27
      da:	08 95       	ret
      dc:	87 30       	cpi	r24, 0x07	; 7
      de:	91 05       	cpc	r25, r1
      e0:	11 f4       	brne	.+4      	; 0xe6 <pinChange+0x54>
      e2:	df 98       	cbi	0x1b, 7	; 27
      e4:	08 95       	ret
      e6:	8a 30       	cpi	r24, 0x0A	; 10
      e8:	91 05       	cpc	r25, r1
      ea:	11 f4       	brne	.+4      	; 0xf0 <pinChange+0x5e>
      ec:	c0 98       	cbi	0x18, 0	; 24
      ee:	08 95       	ret
      f0:	8b 30       	cpi	r24, 0x0B	; 11
      f2:	91 05       	cpc	r25, r1
      f4:	11 f4       	brne	.+4      	; 0xfa <pinChange+0x68>
      f6:	c1 98       	cbi	0x18, 1	; 24
      f8:	08 95       	ret
      fa:	8c 30       	cpi	r24, 0x0C	; 12
      fc:	91 05       	cpc	r25, r1
      fe:	11 f4       	brne	.+4      	; 0x104 <pinChange+0x72>
     100:	c2 98       	cbi	0x18, 2	; 24
     102:	08 95       	ret
     104:	8d 30       	cpi	r24, 0x0D	; 13
     106:	91 05       	cpc	r25, r1
     108:	11 f4       	brne	.+4      	; 0x10e <pinChange+0x7c>
     10a:	c3 98       	cbi	0x18, 3	; 24
     10c:	08 95       	ret
     10e:	8e 30       	cpi	r24, 0x0E	; 14
     110:	91 05       	cpc	r25, r1
     112:	11 f4       	brne	.+4      	; 0x118 <pinChange+0x86>
     114:	c4 98       	cbi	0x18, 4	; 24
     116:	08 95       	ret
     118:	8f 30       	cpi	r24, 0x0F	; 15
     11a:	91 05       	cpc	r25, r1
     11c:	11 f4       	brne	.+4      	; 0x122 <pinChange+0x90>
     11e:	c5 98       	cbi	0x18, 5	; 24
     120:	08 95       	ret
     122:	80 31       	cpi	r24, 0x10	; 16
     124:	91 05       	cpc	r25, r1
     126:	11 f4       	brne	.+4      	; 0x12c <pinChange+0x9a>
     128:	c6 98       	cbi	0x18, 6	; 24
     12a:	08 95       	ret
     12c:	81 31       	cpi	r24, 0x11	; 17
     12e:	91 05       	cpc	r25, r1
     130:	11 f4       	brne	.+4      	; 0x136 <pinChange+0xa4>
     132:	c7 98       	cbi	0x18, 7	; 24
     134:	08 95       	ret
     136:	84 31       	cpi	r24, 0x14	; 20
     138:	91 05       	cpc	r25, r1
     13a:	11 f4       	brne	.+4      	; 0x140 <pinChange+0xae>
     13c:	a8 98       	cbi	0x15, 0	; 21
     13e:	08 95       	ret
     140:	85 31       	cpi	r24, 0x15	; 21
     142:	91 05       	cpc	r25, r1
     144:	11 f4       	brne	.+4      	; 0x14a <pinChange+0xb8>
     146:	a9 98       	cbi	0x15, 1	; 21
     148:	08 95       	ret
     14a:	86 31       	cpi	r24, 0x16	; 22
     14c:	91 05       	cpc	r25, r1
     14e:	11 f4       	brne	.+4      	; 0x154 <pinChange+0xc2>
     150:	aa 98       	cbi	0x15, 2	; 21
     152:	08 95       	ret
     154:	87 31       	cpi	r24, 0x17	; 23
     156:	91 05       	cpc	r25, r1
     158:	11 f4       	brne	.+4      	; 0x15e <pinChange+0xcc>
     15a:	ab 98       	cbi	0x15, 3	; 21
     15c:	08 95       	ret
     15e:	88 31       	cpi	r24, 0x18	; 24
     160:	91 05       	cpc	r25, r1
     162:	11 f4       	brne	.+4      	; 0x168 <pinChange+0xd6>
     164:	ac 98       	cbi	0x15, 4	; 21
     166:	08 95       	ret
     168:	89 31       	cpi	r24, 0x19	; 25
     16a:	91 05       	cpc	r25, r1
     16c:	11 f4       	brne	.+4      	; 0x172 <pinChange+0xe0>
     16e:	ad 98       	cbi	0x15, 5	; 21
     170:	08 95       	ret
     172:	8a 31       	cpi	r24, 0x1A	; 26
     174:	91 05       	cpc	r25, r1
     176:	11 f4       	brne	.+4      	; 0x17c <pinChange+0xea>
     178:	ae 98       	cbi	0x15, 6	; 21
     17a:	08 95       	ret
     17c:	8b 31       	cpi	r24, 0x1B	; 27
     17e:	91 05       	cpc	r25, r1
     180:	11 f4       	brne	.+4      	; 0x186 <pinChange+0xf4>
     182:	af 98       	cbi	0x15, 7	; 21
     184:	08 95       	ret
     186:	8e 31       	cpi	r24, 0x1E	; 30
     188:	91 05       	cpc	r25, r1
     18a:	11 f4       	brne	.+4      	; 0x190 <pinChange+0xfe>
     18c:	90 98       	cbi	0x12, 0	; 18
     18e:	08 95       	ret
     190:	8f 31       	cpi	r24, 0x1F	; 31
     192:	91 05       	cpc	r25, r1
     194:	11 f4       	brne	.+4      	; 0x19a <pinChange+0x108>
     196:	91 98       	cbi	0x12, 1	; 18
     198:	08 95       	ret
     19a:	80 32       	cpi	r24, 0x20	; 32
     19c:	91 05       	cpc	r25, r1
     19e:	11 f4       	brne	.+4      	; 0x1a4 <pinChange+0x112>
     1a0:	92 98       	cbi	0x12, 2	; 18
     1a2:	08 95       	ret
     1a4:	81 32       	cpi	r24, 0x21	; 33
     1a6:	91 05       	cpc	r25, r1
     1a8:	11 f4       	brne	.+4      	; 0x1ae <pinChange+0x11c>
     1aa:	93 98       	cbi	0x12, 3	; 18
     1ac:	08 95       	ret
     1ae:	82 32       	cpi	r24, 0x22	; 34
     1b0:	91 05       	cpc	r25, r1
     1b2:	11 f4       	brne	.+4      	; 0x1b8 <pinChange+0x126>
     1b4:	94 98       	cbi	0x12, 4	; 18
     1b6:	08 95       	ret
     1b8:	83 32       	cpi	r24, 0x23	; 35
     1ba:	91 05       	cpc	r25, r1
     1bc:	11 f4       	brne	.+4      	; 0x1c2 <pinChange+0x130>
     1be:	95 98       	cbi	0x12, 5	; 18
     1c0:	08 95       	ret
     1c2:	84 32       	cpi	r24, 0x24	; 36
     1c4:	91 05       	cpc	r25, r1
     1c6:	11 f4       	brne	.+4      	; 0x1cc <pinChange+0x13a>
     1c8:	96 98       	cbi	0x12, 6	; 18
     1ca:	08 95       	ret
     1cc:	85 97       	sbiw	r24, 0x25	; 37
     1ce:	09 f0       	breq	.+2      	; 0x1d2 <pinChange+0x140>
     1d0:	9f c0       	rjmp	.+318    	; 0x310 <pinChange+0x27e>
     1d2:	97 98       	cbi	0x12, 7	; 18
     1d4:	08 95       	ret
     1d6:	00 97       	sbiw	r24, 0x00	; 0
     1d8:	11 f4       	brne	.+4      	; 0x1de <pinChange+0x14c>
     1da:	d8 9a       	sbi	0x1b, 0	; 27
     1dc:	08 95       	ret
     1de:	81 30       	cpi	r24, 0x01	; 1
     1e0:	91 05       	cpc	r25, r1
     1e2:	11 f4       	brne	.+4      	; 0x1e8 <pinChange+0x156>
     1e4:	d9 9a       	sbi	0x1b, 1	; 27
     1e6:	08 95       	ret
     1e8:	82 30       	cpi	r24, 0x02	; 2
     1ea:	91 05       	cpc	r25, r1
     1ec:	11 f4       	brne	.+4      	; 0x1f2 <pinChange+0x160>
     1ee:	da 9a       	sbi	0x1b, 2	; 27
     1f0:	08 95       	ret
     1f2:	83 30       	cpi	r24, 0x03	; 3
     1f4:	91 05       	cpc	r25, r1
     1f6:	11 f4       	brne	.+4      	; 0x1fc <pinChange+0x16a>
     1f8:	db 9a       	sbi	0x1b, 3	; 27
     1fa:	08 95       	ret
     1fc:	84 30       	cpi	r24, 0x04	; 4
     1fe:	91 05       	cpc	r25, r1
     200:	11 f4       	brne	.+4      	; 0x206 <pinChange+0x174>
     202:	dc 9a       	sbi	0x1b, 4	; 27
     204:	08 95       	ret
     206:	85 30       	cpi	r24, 0x05	; 5
     208:	91 05       	cpc	r25, r1
     20a:	11 f4       	brne	.+4      	; 0x210 <pinChange+0x17e>
     20c:	dd 9a       	sbi	0x1b, 5	; 27
     20e:	08 95       	ret
     210:	86 30       	cpi	r24, 0x06	; 6
     212:	91 05       	cpc	r25, r1
     214:	11 f4       	brne	.+4      	; 0x21a <pinChange+0x188>
     216:	de 9a       	sbi	0x1b, 6	; 27
     218:	08 95       	ret
     21a:	87 30       	cpi	r24, 0x07	; 7
     21c:	91 05       	cpc	r25, r1
     21e:	11 f4       	brne	.+4      	; 0x224 <pinChange+0x192>
     220:	df 9a       	sbi	0x1b, 7	; 27
     222:	08 95       	ret
     224:	8a 30       	cpi	r24, 0x0A	; 10
     226:	91 05       	cpc	r25, r1
     228:	11 f4       	brne	.+4      	; 0x22e <pinChange+0x19c>
     22a:	c0 9a       	sbi	0x18, 0	; 24
     22c:	08 95       	ret
     22e:	8b 30       	cpi	r24, 0x0B	; 11
     230:	91 05       	cpc	r25, r1
     232:	11 f4       	brne	.+4      	; 0x238 <pinChange+0x1a6>
     234:	c1 9a       	sbi	0x18, 1	; 24
     236:	08 95       	ret
     238:	8c 30       	cpi	r24, 0x0C	; 12
     23a:	91 05       	cpc	r25, r1
     23c:	11 f4       	brne	.+4      	; 0x242 <pinChange+0x1b0>
     23e:	c2 9a       	sbi	0x18, 2	; 24
     240:	08 95       	ret
     242:	8d 30       	cpi	r24, 0x0D	; 13
     244:	91 05       	cpc	r25, r1
     246:	11 f4       	brne	.+4      	; 0x24c <pinChange+0x1ba>
     248:	c3 9a       	sbi	0x18, 3	; 24
     24a:	08 95       	ret
     24c:	8e 30       	cpi	r24, 0x0E	; 14
     24e:	91 05       	cpc	r25, r1
     250:	11 f4       	brne	.+4      	; 0x256 <pinChange+0x1c4>
     252:	c4 9a       	sbi	0x18, 4	; 24
     254:	08 95       	ret
     256:	8f 30       	cpi	r24, 0x0F	; 15
     258:	91 05       	cpc	r25, r1
     25a:	11 f4       	brne	.+4      	; 0x260 <pinChange+0x1ce>
     25c:	c5 9a       	sbi	0x18, 5	; 24
     25e:	08 95       	ret
     260:	80 31       	cpi	r24, 0x10	; 16
     262:	91 05       	cpc	r25, r1
     264:	11 f4       	brne	.+4      	; 0x26a <pinChange+0x1d8>
     266:	c6 9a       	sbi	0x18, 6	; 24
     268:	08 95       	ret
     26a:	81 31       	cpi	r24, 0x11	; 17
     26c:	91 05       	cpc	r25, r1
     26e:	11 f4       	brne	.+4      	; 0x274 <pinChange+0x1e2>
     270:	c7 9a       	sbi	0x18, 7	; 24
     272:	08 95       	ret
     274:	84 31       	cpi	r24, 0x14	; 20
     276:	91 05       	cpc	r25, r1
     278:	11 f4       	brne	.+4      	; 0x27e <pinChange+0x1ec>
     27a:	a8 9a       	sbi	0x15, 0	; 21
     27c:	08 95       	ret
     27e:	85 31       	cpi	r24, 0x15	; 21
     280:	91 05       	cpc	r25, r1
     282:	11 f4       	brne	.+4      	; 0x288 <pinChange+0x1f6>
     284:	a9 9a       	sbi	0x15, 1	; 21
     286:	08 95       	ret
     288:	86 31       	cpi	r24, 0x16	; 22
     28a:	91 05       	cpc	r25, r1
     28c:	11 f4       	brne	.+4      	; 0x292 <pinChange+0x200>
     28e:	aa 9a       	sbi	0x15, 2	; 21
     290:	08 95       	ret
     292:	87 31       	cpi	r24, 0x17	; 23
     294:	91 05       	cpc	r25, r1
     296:	11 f4       	brne	.+4      	; 0x29c <pinChange+0x20a>
     298:	ab 9a       	sbi	0x15, 3	; 21
     29a:	08 95       	ret
     29c:	88 31       	cpi	r24, 0x18	; 24
     29e:	91 05       	cpc	r25, r1
     2a0:	11 f4       	brne	.+4      	; 0x2a6 <pinChange+0x214>
     2a2:	ac 9a       	sbi	0x15, 4	; 21
     2a4:	08 95       	ret
     2a6:	89 31       	cpi	r24, 0x19	; 25
     2a8:	91 05       	cpc	r25, r1
     2aa:	11 f4       	brne	.+4      	; 0x2b0 <pinChange+0x21e>
     2ac:	ad 9a       	sbi	0x15, 5	; 21
     2ae:	08 95       	ret
     2b0:	8a 31       	cpi	r24, 0x1A	; 26
     2b2:	91 05       	cpc	r25, r1
     2b4:	11 f4       	brne	.+4      	; 0x2ba <pinChange+0x228>
     2b6:	ae 9a       	sbi	0x15, 6	; 21
     2b8:	08 95       	ret
     2ba:	8b 31       	cpi	r24, 0x1B	; 27
     2bc:	91 05       	cpc	r25, r1
     2be:	11 f4       	brne	.+4      	; 0x2c4 <pinChange+0x232>
     2c0:	af 9a       	sbi	0x15, 7	; 21
     2c2:	08 95       	ret
     2c4:	8e 31       	cpi	r24, 0x1E	; 30
     2c6:	91 05       	cpc	r25, r1
     2c8:	11 f4       	brne	.+4      	; 0x2ce <pinChange+0x23c>
     2ca:	90 9a       	sbi	0x12, 0	; 18
     2cc:	08 95       	ret
     2ce:	8f 31       	cpi	r24, 0x1F	; 31
     2d0:	91 05       	cpc	r25, r1
     2d2:	11 f4       	brne	.+4      	; 0x2d8 <pinChange+0x246>
     2d4:	91 9a       	sbi	0x12, 1	; 18
     2d6:	08 95       	ret
     2d8:	80 32       	cpi	r24, 0x20	; 32
     2da:	91 05       	cpc	r25, r1
     2dc:	11 f4       	brne	.+4      	; 0x2e2 <pinChange+0x250>
     2de:	92 9a       	sbi	0x12, 2	; 18
     2e0:	08 95       	ret
     2e2:	81 32       	cpi	r24, 0x21	; 33
     2e4:	91 05       	cpc	r25, r1
     2e6:	11 f4       	brne	.+4      	; 0x2ec <pinChange+0x25a>
     2e8:	93 9a       	sbi	0x12, 3	; 18
     2ea:	08 95       	ret
     2ec:	82 32       	cpi	r24, 0x22	; 34
     2ee:	91 05       	cpc	r25, r1
     2f0:	11 f4       	brne	.+4      	; 0x2f6 <pinChange+0x264>
     2f2:	94 9a       	sbi	0x12, 4	; 18
     2f4:	08 95       	ret
     2f6:	83 32       	cpi	r24, 0x23	; 35
     2f8:	91 05       	cpc	r25, r1
     2fa:	11 f4       	brne	.+4      	; 0x300 <pinChange+0x26e>
     2fc:	95 9a       	sbi	0x12, 5	; 18
     2fe:	08 95       	ret
     300:	84 32       	cpi	r24, 0x24	; 36
     302:	91 05       	cpc	r25, r1
     304:	11 f4       	brne	.+4      	; 0x30a <pinChange+0x278>
     306:	96 9a       	sbi	0x12, 6	; 18
     308:	08 95       	ret
     30a:	85 97       	sbiw	r24, 0x25	; 37
     30c:	09 f4       	brne	.+2      	; 0x310 <pinChange+0x27e>
     30e:	97 9a       	sbi	0x12, 7	; 18
     310:	08 95       	ret

00000312 <Lcd4_Port>:
     312:	cf 93       	push	r28
     314:	c8 2f       	mov	r28, r24
     316:	80 ff       	sbrs	r24, 0
     318:	07 c0       	rjmp	.+14     	; 0x328 <Lcd4_Port+0x16>
     31a:	61 e0       	ldi	r22, 0x01	; 1
     31c:	70 e0       	ldi	r23, 0x00	; 0
     31e:	82 e2       	ldi	r24, 0x22	; 34
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
     326:	06 c0       	rjmp	.+12     	; 0x334 <Lcd4_Port+0x22>
     328:	60 e0       	ldi	r22, 0x00	; 0
     32a:	70 e0       	ldi	r23, 0x00	; 0
     32c:	82 e2       	ldi	r24, 0x22	; 34
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
     334:	c1 ff       	sbrs	r28, 1
     336:	07 c0       	rjmp	.+14     	; 0x346 <Lcd4_Port+0x34>
     338:	61 e0       	ldi	r22, 0x01	; 1
     33a:	70 e0       	ldi	r23, 0x00	; 0
     33c:	83 e2       	ldi	r24, 0x23	; 35
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
     344:	06 c0       	rjmp	.+12     	; 0x352 <Lcd4_Port+0x40>
     346:	60 e0       	ldi	r22, 0x00	; 0
     348:	70 e0       	ldi	r23, 0x00	; 0
     34a:	83 e2       	ldi	r24, 0x23	; 35
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
     352:	c2 ff       	sbrs	r28, 2
     354:	07 c0       	rjmp	.+14     	; 0x364 <Lcd4_Port+0x52>
     356:	61 e0       	ldi	r22, 0x01	; 1
     358:	70 e0       	ldi	r23, 0x00	; 0
     35a:	84 e2       	ldi	r24, 0x24	; 36
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
     362:	06 c0       	rjmp	.+12     	; 0x370 <Lcd4_Port+0x5e>
     364:	60 e0       	ldi	r22, 0x00	; 0
     366:	70 e0       	ldi	r23, 0x00	; 0
     368:	84 e2       	ldi	r24, 0x24	; 36
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
     370:	c3 ff       	sbrs	r28, 3
     372:	07 c0       	rjmp	.+14     	; 0x382 <Lcd4_Port+0x70>
     374:	61 e0       	ldi	r22, 0x01	; 1
     376:	70 e0       	ldi	r23, 0x00	; 0
     378:	85 e2       	ldi	r24, 0x25	; 37
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
     380:	06 c0       	rjmp	.+12     	; 0x38e <Lcd4_Port+0x7c>
     382:	60 e0       	ldi	r22, 0x00	; 0
     384:	70 e0       	ldi	r23, 0x00	; 0
     386:	85 e2       	ldi	r24, 0x25	; 37
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
     38e:	cf 91       	pop	r28
     390:	08 95       	ret

00000392 <Lcd4_Cmd>:
     392:	cf 93       	push	r28
     394:	c8 2f       	mov	r28, r24
     396:	60 e0       	ldi	r22, 0x00	; 0
     398:	70 e0       	ldi	r23, 0x00	; 0
     39a:	80 e2       	ldi	r24, 0x20	; 32
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
     3a2:	8c 2f       	mov	r24, r28
     3a4:	0e 94 89 01 	call	0x312	; 0x312 <Lcd4_Port>
     3a8:	61 e0       	ldi	r22, 0x01	; 1
     3aa:	70 e0       	ldi	r23, 0x00	; 0
     3ac:	81 e2       	ldi	r24, 0x21	; 33
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
     3b4:	89 ef       	ldi	r24, 0xF9	; 249
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	01 97       	sbiw	r24, 0x01	; 1
     3ba:	f1 f7       	brne	.-4      	; 0x3b8 <Lcd4_Cmd+0x26>
     3bc:	00 c0       	rjmp	.+0      	; 0x3be <Lcd4_Cmd+0x2c>
     3be:	00 00       	nop
     3c0:	60 e0       	ldi	r22, 0x00	; 0
     3c2:	70 e0       	ldi	r23, 0x00	; 0
     3c4:	81 e2       	ldi	r24, 0x21	; 33
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
     3cc:	89 ef       	ldi	r24, 0xF9	; 249
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	01 97       	sbiw	r24, 0x01	; 1
     3d2:	f1 f7       	brne	.-4      	; 0x3d0 <Lcd4_Cmd+0x3e>
     3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <Lcd4_Cmd+0x44>
     3d6:	00 00       	nop
     3d8:	cf 91       	pop	r28
     3da:	08 95       	ret

000003dc <Lcd4_Set_Cursor>:
     3dc:	cf 93       	push	r28
     3de:	c6 2f       	mov	r28, r22
     3e0:	81 30       	cpi	r24, 0x01	; 1
     3e2:	59 f4       	brne	.+22     	; 0x3fa <Lcd4_Set_Cursor+0x1e>
     3e4:	80 e8       	ldi	r24, 0x80	; 128
     3e6:	86 0f       	add	r24, r22
     3e8:	82 95       	swap	r24
     3ea:	8f 70       	andi	r24, 0x0F	; 15
     3ec:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
     3f0:	8c 2f       	mov	r24, r28
     3f2:	8f 70       	andi	r24, 0x0F	; 15
     3f4:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
     3f8:	0c c0       	rjmp	.+24     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     3fa:	82 30       	cpi	r24, 0x02	; 2
     3fc:	51 f4       	brne	.+20     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     3fe:	80 ec       	ldi	r24, 0xC0	; 192
     400:	86 0f       	add	r24, r22
     402:	82 95       	swap	r24
     404:	8f 70       	andi	r24, 0x0F	; 15
     406:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
     40a:	8c 2f       	mov	r24, r28
     40c:	8f 70       	andi	r24, 0x0F	; 15
     40e:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
     412:	cf 91       	pop	r28
     414:	08 95       	ret

00000416 <Lcd4_Init>:
     416:	80 e0       	ldi	r24, 0x00	; 0
     418:	0e 94 89 01 	call	0x312	; 0x312 <Lcd4_Port>
     41c:	87 e8       	ldi	r24, 0x87	; 135
     41e:	93 e1       	ldi	r25, 0x13	; 19
     420:	01 97       	sbiw	r24, 0x01	; 1
     422:	f1 f7       	brne	.-4      	; 0x420 <Lcd4_Init+0xa>
     424:	00 c0       	rjmp	.+0      	; 0x426 <Lcd4_Init+0x10>
     426:	00 00       	nop
     428:	83 e0       	ldi	r24, 0x03	; 3
     42a:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
     42e:	81 ee       	ldi	r24, 0xE1	; 225
     430:	94 e0       	ldi	r25, 0x04	; 4
     432:	01 97       	sbiw	r24, 0x01	; 1
     434:	f1 f7       	brne	.-4      	; 0x432 <Lcd4_Init+0x1c>
     436:	00 c0       	rjmp	.+0      	; 0x438 <Lcd4_Init+0x22>
     438:	00 00       	nop
     43a:	83 e0       	ldi	r24, 0x03	; 3
     43c:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
     440:	8d eb       	ldi	r24, 0xBD	; 189
     442:	9a e0       	ldi	r25, 0x0A	; 10
     444:	01 97       	sbiw	r24, 0x01	; 1
     446:	f1 f7       	brne	.-4      	; 0x444 <Lcd4_Init+0x2e>
     448:	00 c0       	rjmp	.+0      	; 0x44a <Lcd4_Init+0x34>
     44a:	00 00       	nop
     44c:	83 e0       	ldi	r24, 0x03	; 3
     44e:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
     452:	82 e0       	ldi	r24, 0x02	; 2
     454:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
     458:	82 e0       	ldi	r24, 0x02	; 2
     45a:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
     45e:	88 e0       	ldi	r24, 0x08	; 8
     460:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
     464:	80 e0       	ldi	r24, 0x00	; 0
     466:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
     46a:	8c e0       	ldi	r24, 0x0C	; 12
     46c:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
     470:	80 e0       	ldi	r24, 0x00	; 0
     472:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
     476:	86 e0       	ldi	r24, 0x06	; 6
     478:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
     47c:	08 95       	ret

0000047e <Lcd4_Write_Char>:
     47e:	cf 93       	push	r28
     480:	c8 2f       	mov	r28, r24
     482:	61 e0       	ldi	r22, 0x01	; 1
     484:	70 e0       	ldi	r23, 0x00	; 0
     486:	80 e2       	ldi	r24, 0x20	; 32
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
     48e:	8c 2f       	mov	r24, r28
     490:	82 95       	swap	r24
     492:	8f 70       	andi	r24, 0x0F	; 15
     494:	0e 94 89 01 	call	0x312	; 0x312 <Lcd4_Port>
     498:	61 e0       	ldi	r22, 0x01	; 1
     49a:	70 e0       	ldi	r23, 0x00	; 0
     49c:	81 e2       	ldi	r24, 0x21	; 33
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
     4a4:	89 ef       	ldi	r24, 0xF9	; 249
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	01 97       	sbiw	r24, 0x01	; 1
     4aa:	f1 f7       	brne	.-4      	; 0x4a8 <Lcd4_Write_Char+0x2a>
     4ac:	00 c0       	rjmp	.+0      	; 0x4ae <Lcd4_Write_Char+0x30>
     4ae:	00 00       	nop
     4b0:	60 e0       	ldi	r22, 0x00	; 0
     4b2:	70 e0       	ldi	r23, 0x00	; 0
     4b4:	81 e2       	ldi	r24, 0x21	; 33
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
     4bc:	89 ef       	ldi	r24, 0xF9	; 249
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	01 97       	sbiw	r24, 0x01	; 1
     4c2:	f1 f7       	brne	.-4      	; 0x4c0 <Lcd4_Write_Char+0x42>
     4c4:	00 c0       	rjmp	.+0      	; 0x4c6 <Lcd4_Write_Char+0x48>
     4c6:	00 00       	nop
     4c8:	8c 2f       	mov	r24, r28
     4ca:	8f 70       	andi	r24, 0x0F	; 15
     4cc:	0e 94 89 01 	call	0x312	; 0x312 <Lcd4_Port>
     4d0:	61 e0       	ldi	r22, 0x01	; 1
     4d2:	70 e0       	ldi	r23, 0x00	; 0
     4d4:	81 e2       	ldi	r24, 0x21	; 33
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
     4dc:	89 ef       	ldi	r24, 0xF9	; 249
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	01 97       	sbiw	r24, 0x01	; 1
     4e2:	f1 f7       	brne	.-4      	; 0x4e0 <Lcd4_Write_Char+0x62>
     4e4:	00 c0       	rjmp	.+0      	; 0x4e6 <Lcd4_Write_Char+0x68>
     4e6:	00 00       	nop
     4e8:	60 e0       	ldi	r22, 0x00	; 0
     4ea:	70 e0       	ldi	r23, 0x00	; 0
     4ec:	81 e2       	ldi	r24, 0x21	; 33
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
     4f4:	89 ef       	ldi	r24, 0xF9	; 249
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	01 97       	sbiw	r24, 0x01	; 1
     4fa:	f1 f7       	brne	.-4      	; 0x4f8 <Lcd4_Write_Char+0x7a>
     4fc:	00 c0       	rjmp	.+0      	; 0x4fe <Lcd4_Write_Char+0x80>
     4fe:	00 00       	nop
     500:	cf 91       	pop	r28
     502:	08 95       	ret

00000504 <Lcd4_Write_String>:
     504:	cf 93       	push	r28
     506:	df 93       	push	r29
     508:	ec 01       	movw	r28, r24
     50a:	88 81       	ld	r24, Y
     50c:	88 23       	and	r24, r24
     50e:	31 f0       	breq	.+12     	; 0x51c <Lcd4_Write_String+0x18>
     510:	21 96       	adiw	r28, 0x01	; 1
     512:	0e 94 3f 02 	call	0x47e	; 0x47e <Lcd4_Write_Char>
     516:	89 91       	ld	r24, Y+
     518:	81 11       	cpse	r24, r1
     51a:	fb cf       	rjmp	.-10     	; 0x512 <Lcd4_Write_String+0xe>
     51c:	df 91       	pop	r29
     51e:	cf 91       	pop	r28
     520:	08 95       	ret

00000522 <UART_init>:
     522:	1b b8       	out	0x0b, r1	; 11
     524:	88 e1       	ldi	r24, 0x18	; 24
     526:	8a b9       	out	0x0a, r24	; 10
     528:	86 e8       	ldi	r24, 0x86	; 134
     52a:	80 bd       	out	0x20, r24	; 32
     52c:	83 e3       	ldi	r24, 0x33	; 51
     52e:	89 b9       	out	0x09, r24	; 9
     530:	10 bc       	out	0x20, r1	; 32
     532:	08 95       	ret

00000534 <UART_send>:
     534:	5d 9b       	sbis	0x0b, 5	; 11
     536:	fe cf       	rjmp	.-4      	; 0x534 <UART_send>
     538:	8c b9       	out	0x0c, r24	; 12
     53a:	08 95       	ret

0000053c <UART_receive>:
     53c:	5f 9b       	sbis	0x0b, 7	; 11
     53e:	fe cf       	rjmp	.-4      	; 0x53c <UART_receive>
     540:	8c b1       	in	r24, 0x0c	; 12
     542:	08 95       	ret

00000544 <rType>:
}

void rType(uint16_t rr1, uint16_t rr2, uint16_t wr){
	readRegister1 = rr1;
     544:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <readRegister1+0x1>
     548:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <readRegister1>
	readRegister2 = rr2;
     54c:	70 93 85 00 	sts	0x0085, r23	; 0x800085 <readRegister2+0x1>
     550:	60 93 84 00 	sts	0x0084, r22	; 0x800084 <readRegister2>
	writeRegister1 = wr;
     554:	50 93 7f 00 	sts	0x007F, r21	; 0x80007f <writeRegister1+0x1>
     558:	40 93 7e 00 	sts	0x007E, r20	; 0x80007e <writeRegister1>
	
	PORTB = ((registers[rr1] << 4) & 0xFF) | ((registers[rr2]) & 0xFF);
     55c:	fc 01       	movw	r30, r24
     55e:	ea 59       	subi	r30, 0x9A	; 154
     560:	ff 4f       	sbci	r31, 0xFF	; 255
     562:	90 81       	ld	r25, Z
     564:	fb 01       	movw	r30, r22
     566:	ea 59       	subi	r30, 0x9A	; 154
     568:	ff 4f       	sbci	r31, 0xFF	; 255
     56a:	20 81       	ld	r18, Z
     56c:	30 e1       	ldi	r19, 0x10	; 16
     56e:	93 9f       	mul	r25, r19
     570:	c0 01       	movw	r24, r0
     572:	11 24       	eor	r1, r1
     574:	82 2b       	or	r24, r18
     576:	88 bb       	out	0x18, r24	; 24
     578:	08 95       	ret

0000057a <sType>:
	//SPI_MasterTransmit(registers[rr2] & 0x0F);
	//SPI_MasterTransmit(registers[rr1] & 0x0F);
}

void sType(uint16_t rr1, uint16_t wr, uint16_t imm){
	readRegister1 = rr1;
     57a:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <readRegister1+0x1>
     57e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <readRegister1>
	writeRegister1 = wr;
     582:	70 93 7f 00 	sts	0x007F, r23	; 0x80007f <writeRegister1+0x1>
     586:	60 93 7e 00 	sts	0x007E, r22	; 0x80007e <writeRegister1>
	immediate = imm;
     58a:	50 93 8b 00 	sts	0x008B, r21	; 0x80008b <immediate+0x1>
     58e:	40 93 8a 00 	sts	0x008A, r20	; 0x80008a <immediate>
	
	//SPI_MasterTransmit('A');
	PORTB = ((registers[rr1] << 4) & 0xFF) | (imm & 0xFF);
     592:	fc 01       	movw	r30, r24
     594:	ea 59       	subi	r30, 0x9A	; 154
     596:	ff 4f       	sbci	r31, 0xFF	; 255
     598:	80 81       	ld	r24, Z
     59a:	82 95       	swap	r24
     59c:	80 7f       	andi	r24, 0xF0	; 240
     59e:	48 2b       	or	r20, r24
     5a0:	48 bb       	out	0x18, r20	; 24
     5a2:	08 95       	ret

000005a4 <sw>:
	//SPI_MasterTransmit(((registers[rr1] << 4) & 0xFF) | (imm & 0xFF));
}


void sw(uint16_t rr1, uint16_t rr2, uint16_t imm){
	readRegister1 = rr1;
     5a4:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <readRegister1+0x1>
     5a8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <readRegister1>
	readRegister2 = rr2;
     5ac:	70 93 85 00 	sts	0x0085, r23	; 0x800085 <readRegister2+0x1>
     5b0:	60 93 84 00 	sts	0x0084, r22	; 0x800084 <readRegister2>
	immediate = imm;
     5b4:	50 93 8b 00 	sts	0x008B, r21	; 0x80008b <immediate+0x1>
     5b8:	40 93 8a 00 	sts	0x008A, r20	; 0x80008a <immediate>
	
	PORTB = ((registers[rr1] << 4) & 0xFF) | (imm & 0xFF);
     5bc:	fc 01       	movw	r30, r24
     5be:	ea 59       	subi	r30, 0x9A	; 154
     5c0:	ff 4f       	sbci	r31, 0xFF	; 255
     5c2:	80 81       	ld	r24, Z
     5c4:	82 95       	swap	r24
     5c6:	80 7f       	andi	r24, 0xF0	; 240
     5c8:	48 2b       	or	r20, r24
     5ca:	48 bb       	out	0x18, r20	; 24
     5cc:	08 95       	ret

000005ce <setAluOp>:
	//SPI_MasterTransmit(imm & 0x0F);	
	//SPI_MasterTransmit(registers[rr1] & 0x0F);	
}

void setAluOp(uint16_t code){
	if(code == A || code == B || code == L || code == M)aluOp = add;		
     5ce:	81 30       	cpi	r24, 0x01	; 1
     5d0:	91 05       	cpc	r25, r1
     5d2:	49 f0       	breq	.+18     	; 0x5e6 <setAluOp+0x18>
     5d4:	9c 01       	movw	r18, r24
     5d6:	23 50       	subi	r18, 0x03	; 3
     5d8:	31 09       	sbc	r19, r1
     5da:	22 30       	cpi	r18, 0x02	; 2
     5dc:	31 05       	cpc	r19, r1
     5de:	18 f0       	brcs	.+6      	; 0x5e6 <setAluOp+0x18>
     5e0:	8a 30       	cpi	r24, 0x0A	; 10
     5e2:	91 05       	cpc	r25, r1
     5e4:	21 f4       	brne	.+8      	; 0x5ee <setAluOp+0x20>
     5e6:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <aluOp+0x1>
     5ea:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <aluOp>
	if(code == C || code == D || code == N || code == O) aluOp = sub;
     5ee:	9c 01       	movw	r18, r24
     5f0:	2b 50       	subi	r18, 0x0B	; 11
     5f2:	31 09       	sbc	r19, r1
     5f4:	22 30       	cpi	r18, 0x02	; 2
     5f6:	31 05       	cpc	r19, r1
     5f8:	30 f0       	brcs	.+12     	; 0x606 <setAluOp+0x38>
     5fa:	88 30       	cpi	r24, 0x08	; 8
     5fc:	91 05       	cpc	r25, r1
     5fe:	19 f0       	breq	.+6      	; 0x606 <setAluOp+0x38>
     600:	8f 30       	cpi	r24, 0x0F	; 15
     602:	91 05       	cpc	r25, r1
     604:	31 f4       	brne	.+12     	; 0x612 <setAluOp+0x44>
     606:	21 e0       	ldi	r18, 0x01	; 1
     608:	30 e0       	ldi	r19, 0x00	; 0
     60a:	30 93 81 00 	sts	0x0081, r19	; 0x800081 <aluOp+0x1>
     60e:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <aluOp>
	if(code == E || code == F) aluOp = and;
     612:	8e 30       	cpi	r24, 0x0E	; 14
     614:	91 05       	cpc	r25, r1
     616:	19 f0       	breq	.+6      	; 0x61e <setAluOp+0x50>
     618:	89 30       	cpi	r24, 0x09	; 9
     61a:	91 05       	cpc	r25, r1
     61c:	31 f4       	brne	.+12     	; 0x62a <setAluOp+0x5c>
     61e:	22 e0       	ldi	r18, 0x02	; 2
     620:	30 e0       	ldi	r19, 0x00	; 0
     622:	30 93 81 00 	sts	0x0081, r19	; 0x800081 <aluOp+0x1>
     626:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <aluOp>
	if(code == G || code == H) aluOp = or;
     62a:	82 30       	cpi	r24, 0x02	; 2
     62c:	91 05       	cpc	r25, r1
     62e:	19 f0       	breq	.+6      	; 0x636 <setAluOp+0x68>
     630:	8d 30       	cpi	r24, 0x0D	; 13
     632:	91 05       	cpc	r25, r1
     634:	31 f4       	brne	.+12     	; 0x642 <setAluOp+0x74>
     636:	23 e0       	ldi	r18, 0x03	; 3
     638:	30 e0       	ldi	r19, 0x00	; 0
     63a:	30 93 81 00 	sts	0x0081, r19	; 0x800081 <aluOp+0x1>
     63e:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <aluOp>
	if(code == I) aluOp = sll;
     642:	85 30       	cpi	r24, 0x05	; 5
     644:	91 05       	cpc	r25, r1
     646:	39 f4       	brne	.+14     	; 0x656 <setAluOp+0x88>
     648:	85 e0       	ldi	r24, 0x05	; 5
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <aluOp+0x1>
     650:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <aluOp>
     654:	08 95       	ret
	if(code == J) aluOp = srl;
     656:	87 30       	cpi	r24, 0x07	; 7
     658:	91 05       	cpc	r25, r1
     65a:	39 f4       	brne	.+14     	; 0x66a <setAluOp+0x9c>
     65c:	86 e0       	ldi	r24, 0x06	; 6
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <aluOp+0x1>
     664:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <aluOp>
     668:	08 95       	ret
	if(code == K) aluOp = nor;
     66a:	89 2b       	or	r24, r25
     66c:	31 f4       	brne	.+12     	; 0x67a <setAluOp+0xac>
     66e:	84 e0       	ldi	r24, 0x04	; 4
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <aluOp+0x1>
     676:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <aluOp>
     67a:	08 95       	ret

0000067c <setBranchOp>:
}

void setBranchOp(uint16_t code, uint16_t jumpAmount){
	if(code == N){ 
     67c:	88 30       	cpi	r24, 0x08	; 8
     67e:	91 05       	cpc	r25, r1
     680:	29 f4       	brne	.+10     	; 0x68c <setBranchOp+0x10>
		branchOp = beq;
     682:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <branchOp+0x1>
     686:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <branchOp>
		return;
     68a:	08 95       	ret
	}
	if(code == O) {
     68c:	8f 30       	cpi	r24, 0x0F	; 15
     68e:	91 05       	cpc	r25, r1
     690:	39 f4       	brne	.+14     	; 0x6a0 <setBranchOp+0x24>
		branchOp = bneq;
     692:	81 e0       	ldi	r24, 0x01	; 1
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <branchOp+0x1>
     69a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <branchOp>
		return;
     69e:	08 95       	ret
	}
	if(code == P) {
     6a0:	06 97       	sbiw	r24, 0x06	; 6
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <setBranchOp+0x36>
		branchOp = jump;
     6a4:	82 e0       	ldi	r24, 0x02	; 2
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <branchOp+0x1>
     6ac:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <branchOp>
		return;
     6b0:	08 95       	ret
	}	
	branchOp = inc;	
     6b2:	83 e0       	ldi	r24, 0x03	; 3
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <branchOp+0x1>
     6ba:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <branchOp>
     6be:	08 95       	ret

000006c0 <setMemoryOp>:
}

void setMemoryOp(uint16_t code){
	if(code == L) memoryOp = memWrite;
     6c0:	84 30       	cpi	r24, 0x04	; 4
     6c2:	91 05       	cpc	r25, r1
     6c4:	39 f4       	brne	.+14     	; 0x6d4 <setMemoryOp+0x14>
     6c6:	81 e0       	ldi	r24, 0x01	; 1
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <memoryOp+0x1>
     6ce:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <memoryOp>
     6d2:	08 95       	ret
	else if(code == M) memoryOp = memRead;
     6d4:	0a 97       	sbiw	r24, 0x0a	; 10
     6d6:	29 f4       	brne	.+10     	; 0x6e2 <setMemoryOp+0x22>
     6d8:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <memoryOp+0x1>
     6dc:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <memoryOp>
     6e0:	08 95       	ret
	else memoryOp = aluOut;
     6e2:	82 e0       	ldi	r24, 0x02	; 2
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <memoryOp+0x1>
     6ea:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <memoryOp>
     6ee:	08 95       	ret

000006f0 <setControl>:
}

void setControl(uint16_t inst){
     6f0:	cf 92       	push	r12
     6f2:	df 92       	push	r13
     6f4:	ef 92       	push	r14
     6f6:	ff 92       	push	r15
     6f8:	0f 93       	push	r16
     6fa:	1f 93       	push	r17
     6fc:	cf 93       	push	r28
     6fe:	df 93       	push	r29
	uint16_t code = inst >> 12;
     700:	8c 01       	movw	r16, r24
     702:	01 2f       	mov	r16, r17
     704:	11 27       	eor	r17, r17
     706:	02 95       	swap	r16
     708:	0f 70       	andi	r16, 0x0F	; 15
	uint16_t nibble1 = (inst >> 8) & 0x0F;
     70a:	e9 2e       	mov	r14, r25
     70c:	ff 24       	eor	r15, r15
     70e:	2f e0       	ldi	r18, 0x0F	; 15
     710:	e2 22       	and	r14, r18
     712:	ff 24       	eor	r15, r15
	uint16_t nibble2 = (inst >> 4) & 0x0F;
     714:	6c 01       	movw	r12, r24
     716:	d6 94       	lsr	r13
     718:	c7 94       	ror	r12
     71a:	d6 94       	lsr	r13
     71c:	c7 94       	ror	r12
     71e:	d6 94       	lsr	r13
     720:	c7 94       	ror	r12
     722:	d6 94       	lsr	r13
     724:	c7 94       	ror	r12
     726:	2f e0       	ldi	r18, 0x0F	; 15
     728:	c2 22       	and	r12, r18
     72a:	dd 24       	eor	r13, r13
	uint16_t nibble3 = inst & 0x0F;
     72c:	ec 01       	movw	r28, r24
     72e:	cf 70       	andi	r28, 0x0F	; 15
     730:	dd 27       	eor	r29, r29
	jumpAddress = (nibble1 << 4) | nibble2;
     732:	c7 01       	movw	r24, r14
     734:	82 95       	swap	r24
     736:	92 95       	swap	r25
     738:	90 7f       	andi	r25, 0xF0	; 240
     73a:	98 27       	eor	r25, r24
     73c:	80 7f       	andi	r24, 0xF0	; 240
     73e:	98 27       	eor	r25, r24
     740:	8c 29       	or	r24, r12
     742:	9d 29       	or	r25, r13
     744:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <jumpAddress+0x1>
     748:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <jumpAddress>
	
	setAluOp(code);
     74c:	c8 01       	movw	r24, r16
     74e:	0e 94 e7 02 	call	0x5ce	; 0x5ce <setAluOp>
	setBranchOp(code, nibble3);
     752:	be 01       	movw	r22, r28
     754:	c8 01       	movw	r24, r16
     756:	0e 94 3e 03 	call	0x67c	; 0x67c <setBranchOp>
	setMemoryOp(code);
     75a:	c8 01       	movw	r24, r16
     75c:	0e 94 60 03 	call	0x6c0	; 0x6c0 <setMemoryOp>
	
	if(code == A || code == C || code == E || code == G || code == K  || code == N || code == O)		
     760:	c8 01       	movw	r24, r16
     762:	0e 97       	sbiw	r24, 0x0e	; 14
     764:	02 97       	sbiw	r24, 0x02	; 2
     766:	38 f0       	brcs	.+14     	; 0x776 <setControl+0x86>
     768:	03 30       	cpi	r16, 0x03	; 3
     76a:	11 05       	cpc	r17, r1
     76c:	20 f0       	brcs	.+8      	; 0x776 <setControl+0x86>
     76e:	c8 01       	movw	r24, r16
     770:	8b 7f       	andi	r24, 0xFB	; 251
     772:	08 97       	sbiw	r24, 0x08	; 8
     774:	29 f4       	brne	.+10     	; 0x780 <setControl+0x90>
		rType(nibble1, nibble2, nibble3);
     776:	ae 01       	movw	r20, r28
     778:	b6 01       	movw	r22, r12
     77a:	c7 01       	movw	r24, r14
     77c:	0e 94 a2 02 	call	0x544	; 0x544 <rType>
	if(code == B || code == D || code == F || code == H ||  code == I || code == J || code == M)
     780:	c8 01       	movw	r24, r16
     782:	8b 7f       	andi	r24, 0xFB	; 251
     784:	03 97       	sbiw	r24, 0x03	; 3
     786:	41 f0       	breq	.+16     	; 0x798 <setControl+0xa8>
     788:	c8 01       	movw	r24, r16
     78a:	09 97       	sbiw	r24, 0x09	; 9
     78c:	03 97       	sbiw	r24, 0x03	; 3
     78e:	20 f0       	brcs	.+8      	; 0x798 <setControl+0xa8>
     790:	c8 01       	movw	r24, r16
     792:	87 7f       	andi	r24, 0xF7	; 247
     794:	05 97       	sbiw	r24, 0x05	; 5
     796:	29 f4       	brne	.+10     	; 0x7a2 <setControl+0xb2>
		sType(nibble1, nibble2, nibble3);
     798:	ae 01       	movw	r20, r28
     79a:	b6 01       	movw	r22, r12
     79c:	c7 01       	movw	r24, r14
     79e:	0e 94 bd 02 	call	0x57a	; 0x57a <sType>
	if(code == L) sw(nibble1, nibble2, nibble3);
     7a2:	04 30       	cpi	r16, 0x04	; 4
     7a4:	11 05       	cpc	r17, r1
     7a6:	29 f4       	brne	.+10     	; 0x7b2 <setControl+0xc2>
     7a8:	ae 01       	movw	r20, r28
     7aa:	b6 01       	movw	r22, r12
     7ac:	c7 01       	movw	r24, r14
     7ae:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <sw>
	
}
     7b2:	df 91       	pop	r29
     7b4:	cf 91       	pop	r28
     7b6:	1f 91       	pop	r17
     7b8:	0f 91       	pop	r16
     7ba:	ff 90       	pop	r15
     7bc:	ef 90       	pop	r14
     7be:	df 90       	pop	r13
     7c0:	cf 90       	pop	r12
     7c2:	08 95       	ret

000007c4 <align>:


char* align(const char *str) {
     7c4:	ef 92       	push	r14
     7c6:	ff 92       	push	r15
     7c8:	0f 93       	push	r16
     7ca:	1f 93       	push	r17
     7cc:	cf 93       	push	r28
     7ce:	df 93       	push	r29
     7d0:	7c 01       	movw	r14, r24
	int str_length = strlen(str);
     7d2:	fc 01       	movw	r30, r24
     7d4:	01 90       	ld	r0, Z+
     7d6:	00 20       	and	r0, r0
     7d8:	e9 f7       	brne	.-6      	; 0x7d4 <align+0x10>
	int num_zeros_to_add = 4 - str_length;
     7da:	ec 01       	movw	r28, r24
     7dc:	ce 1b       	sub	r28, r30
     7de:	df 0b       	sbc	r29, r31
     7e0:	25 96       	adiw	r28, 0x05	; 5

	if (num_zeros_to_add <= 0) {
     7e2:	1c 16       	cp	r1, r28
     7e4:	1d 06       	cpc	r1, r29
     7e6:	1c f0       	brlt	.+6      	; 0x7ee <align+0x2a>
		// No padding needed, return a copy of the original string
		return strdup(str);
     7e8:	0e 94 59 06 	call	0xcb2	; 0xcb2 <strdup>
     7ec:	16 c0       	rjmp	.+44     	; 0x81a <align+0x56>
	}

	// Allocate memory for the padded string
	char *padded_str = (char*)malloc(5); // 4 characters + null terminator
     7ee:	85 e0       	ldi	r24, 0x05	; 5
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	0e 94 38 05 	call	0xa70	; 0xa70 <malloc>
     7f6:	8c 01       	movw	r16, r24
	if (!padded_str) {
     7f8:	00 97       	sbiw	r24, 0x00	; 0
     7fa:	71 f0       	breq	.+28     	; 0x818 <align+0x54>
		// Memory allocation failed
		return NULL;
	}

	// Fill the beginning of the padded string with zeros
	memset(padded_str, '0', num_zeros_to_add);
     7fc:	ae 01       	movw	r20, r28
     7fe:	60 e3       	ldi	r22, 0x30	; 48
     800:	70 e0       	ldi	r23, 0x00	; 0
     802:	0e 94 73 06 	call	0xce6	; 0xce6 <memset>

	// Copy the original string after the padding
	strcpy(padded_str + num_zeros_to_add, str);
     806:	b7 01       	movw	r22, r14
     808:	c8 01       	movw	r24, r16
     80a:	8c 0f       	add	r24, r28
     80c:	9d 1f       	adc	r25, r29
     80e:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <strcpy>

	return padded_str;
     812:	80 2f       	mov	r24, r16
     814:	91 2f       	mov	r25, r17
     816:	01 c0       	rjmp	.+2      	; 0x81a <align+0x56>

	// Allocate memory for the padded string
	char *padded_str = (char*)malloc(5); // 4 characters + null terminator
	if (!padded_str) {
		// Memory allocation failed
		return NULL;
     818:	91 2f       	mov	r25, r17

	// Copy the original string after the padding
	strcpy(padded_str + num_zeros_to_add, str);

	return padded_str;
}
     81a:	df 91       	pop	r29
     81c:	cf 91       	pop	r28
     81e:	1f 91       	pop	r17
     820:	0f 91       	pop	r16
     822:	ff 90       	pop	r15
     824:	ef 90       	pop	r14
     826:	08 95       	ret

00000828 <main>:


int main(void)
{	
     828:	cf 93       	push	r28
     82a:	df 93       	push	r29
     82c:	cd b7       	in	r28, 0x3d	; 61
     82e:	de b7       	in	r29, 0x3e	; 62
     830:	ec 97       	sbiw	r28, 0x3c	; 60
     832:	0f b6       	in	r0, 0x3f	; 63
     834:	f8 94       	cli
     836:	de bf       	out	0x3e, r29	; 62
     838:	0f be       	out	0x3f, r0	; 63
     83a:	cd bf       	out	0x3d, r28	; 61
	MCUCSR = (1<<JTD);
     83c:	80 e8       	ldi	r24, 0x80	; 128
     83e:	84 bf       	out	0x34, r24	; 52
	MCUCSR = (1<<JTD);
     840:	84 bf       	out	0x34, r24	; 52
	
	DDRA = 0x0F;
     842:	8f e0       	ldi	r24, 0x0F	; 15
     844:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;
     846:	8f ef       	ldi	r24, 0xFF	; 255
     848:	87 bb       	out	0x17, r24	; 23
	DDRC |= 0x7F;
     84a:	84 b3       	in	r24, 0x14	; 20
     84c:	8f 67       	ori	r24, 0x7F	; 127
     84e:	84 bb       	out	0x14, r24	; 20
	DDRD |= 0xFC;
     850:	81 b3       	in	r24, 0x11	; 17
     852:	8c 6f       	ori	r24, 0xFC	; 252
     854:	81 bb       	out	0x11, r24	; 17
	
	UART_init();
     856:	0e 94 91 02 	call	0x522	; 0x522 <UART_init>
	
	//SPI_MasterInit();
	
	Lcd4_Init();
     85a:	0e 94 0b 02 	call	0x416	; 0x416 <Lcd4_Init>
	uint16_t writeData;
	int opCode;

    while (1) 
    {
		sprintf(upper, "%s %s %s", align(itoa(registers[sp] & 0x0F, reg[zero], 2)), align(itoa(registers[t0] & 0x0F, reg[t0], 2)), align(itoa(registers[t1] & 0x0F, reg[t1], 2)));
     85e:	06 e6       	ldi	r16, 0x66	; 102
     860:	10 e0       	ldi	r17, 0x00	; 0
     862:	0f 2e       	mov	r0, r31
     864:	fe e6       	ldi	r31, 0x6E	; 110
     866:	cf 2e       	mov	r12, r31
     868:	f0 e0       	ldi	r31, 0x00	; 0
     86a:	df 2e       	mov	r13, r31
     86c:	f0 2d       	mov	r31, r0
     86e:	ce 01       	movw	r24, r28
     870:	01 96       	adiw	r24, 0x01	; 1
     872:	4c 01       	movw	r8, r24
		sprintf(lower, "%s %s %s", align(itoa(registers[t2] & 0x0F, reg[t2], 2)), align(itoa(registers[t3] & 0x0F, reg[t3], 2)), align(itoa(registers[t4] & 0x0F, reg[t4], 2)));
     874:	5e 01       	movw	r10, r28
     876:	90 e1       	ldi	r25, 0x10	; 16
     878:	a9 0e       	add	r10, r25
     87a:	b1 1c       	adc	r11, r1
	uint16_t writeData;
	int opCode;

    while (1) 
    {
		sprintf(upper, "%s %s %s", align(itoa(registers[sp] & 0x0F, reg[zero], 2)), align(itoa(registers[t0] & 0x0F, reg[t0], 2)), align(itoa(registers[t1] & 0x0F, reg[t1], 2)));
     87c:	f8 01       	movw	r30, r16
     87e:	82 81       	ldd	r24, Z+2	; 0x02
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     880:	8f 70       	andi	r24, 0x0F	; 15
     882:	42 e0       	ldi	r20, 0x02	; 2
     884:	be 01       	movw	r22, r28
     886:	67 5d       	subi	r22, 0xD7	; 215
     888:	7f 4f       	sbci	r23, 0xFF	; 255
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	0e 94 81 06 	call	0xd02	; 0xd02 <__itoa_ncheck>
     890:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <align>
     894:	78 2e       	mov	r7, r24
     896:	69 2e       	mov	r6, r25
     898:	f8 01       	movw	r30, r16
     89a:	81 81       	ldd	r24, Z+1	; 0x01
     89c:	8f 70       	andi	r24, 0x0F	; 15
     89e:	42 e0       	ldi	r20, 0x02	; 2
     8a0:	be 01       	movw	r22, r28
     8a2:	6c 5d       	subi	r22, 0xDC	; 220
     8a4:	7f 4f       	sbci	r23, 0xFF	; 255
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	0e 94 81 06 	call	0xd02	; 0xd02 <__itoa_ncheck>
     8ac:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <align>
     8b0:	f8 2e       	mov	r15, r24
     8b2:	e9 2e       	mov	r14, r25
     8b4:	f8 01       	movw	r30, r16
     8b6:	86 81       	ldd	r24, Z+6	; 0x06
     8b8:	8f 70       	andi	r24, 0x0F	; 15
     8ba:	42 e0       	ldi	r20, 0x02	; 2
     8bc:	be 01       	movw	r22, r28
     8be:	61 5e       	subi	r22, 0xE1	; 225
     8c0:	7f 4f       	sbci	r23, 0xFF	; 255
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	0e 94 81 06 	call	0xd02	; 0xd02 <__itoa_ncheck>
     8c8:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <align>
     8cc:	6f 92       	push	r6
     8ce:	7f 92       	push	r7
     8d0:	ef 92       	push	r14
     8d2:	ff 92       	push	r15
     8d4:	9f 93       	push	r25
     8d6:	8f 93       	push	r24
     8d8:	df 92       	push	r13
     8da:	cf 92       	push	r12
     8dc:	9f 92       	push	r9
     8de:	8f 92       	push	r8
     8e0:	0e 94 a6 06 	call	0xd4c	; 0xd4c <sprintf>
		sprintf(lower, "%s %s %s", align(itoa(registers[t2] & 0x0F, reg[t2], 2)), align(itoa(registers[t3] & 0x0F, reg[t3], 2)), align(itoa(registers[t4] & 0x0F, reg[t4], 2)));
     8e4:	f8 01       	movw	r30, r16
     8e6:	85 81       	ldd	r24, Z+5	; 0x05
     8e8:	8f 70       	andi	r24, 0x0F	; 15
     8ea:	42 e0       	ldi	r20, 0x02	; 2
     8ec:	be 01       	movw	r22, r28
     8ee:	68 5c       	subi	r22, 0xC8	; 200
     8f0:	7f 4f       	sbci	r23, 0xFF	; 255
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	0e 94 81 06 	call	0xd02	; 0xd02 <__itoa_ncheck>
     8f8:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <align>
     8fc:	78 2e       	mov	r7, r24
     8fe:	69 2e       	mov	r6, r25
     900:	f8 01       	movw	r30, r16
     902:	84 81       	ldd	r24, Z+4	; 0x04
     904:	8f 70       	andi	r24, 0x0F	; 15
     906:	42 e0       	ldi	r20, 0x02	; 2
     908:	be 01       	movw	r22, r28
     90a:	6d 5c       	subi	r22, 0xCD	; 205
     90c:	7f 4f       	sbci	r23, 0xFF	; 255
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	0e 94 81 06 	call	0xd02	; 0xd02 <__itoa_ncheck>
     914:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <align>
     918:	f8 2e       	mov	r15, r24
     91a:	e9 2e       	mov	r14, r25
     91c:	f8 01       	movw	r30, r16
     91e:	83 81       	ldd	r24, Z+3	; 0x03
     920:	8f 70       	andi	r24, 0x0F	; 15
     922:	42 e0       	ldi	r20, 0x02	; 2
     924:	be 01       	movw	r22, r28
     926:	62 5d       	subi	r22, 0xD2	; 210
     928:	7f 4f       	sbci	r23, 0xFF	; 255
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	0e 94 81 06 	call	0xd02	; 0xd02 <__itoa_ncheck>
     930:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <align>
     934:	6f 92       	push	r6
     936:	7f 92       	push	r7
     938:	ef 92       	push	r14
     93a:	ff 92       	push	r15
     93c:	9f 93       	push	r25
     93e:	8f 93       	push	r24
     940:	df 92       	push	r13
     942:	cf 92       	push	r12
     944:	bf 92       	push	r11
     946:	af 92       	push	r10
     948:	0e 94 a6 06 	call	0xd4c	; 0xd4c <sprintf>
		Lcd4_Set_Cursor(1,0);
     94c:	60 e0       	ldi	r22, 0x00	; 0
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	0e 94 ee 01 	call	0x3dc	; 0x3dc <Lcd4_Set_Cursor>
		Lcd4_Write_String(upper);
     954:	c4 01       	movw	r24, r8
     956:	0e 94 82 02 	call	0x504	; 0x504 <Lcd4_Write_String>
		Lcd4_Set_Cursor(2,0);
     95a:	60 e0       	ldi	r22, 0x00	; 0
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	0e 94 ee 01 	call	0x3dc	; 0x3dc <Lcd4_Set_Cursor>
		Lcd4_Write_String(lower);
     962:	c5 01       	movw	r24, r10
     964:	0e 94 82 02 	call	0x504	; 0x504 <Lcd4_Write_String>
		
		instruction = UART_receive();
     968:	0e 94 9e 02 	call	0x53c	; 0x53c <UART_receive>
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <instruction+0x1>
     972:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <instruction>
		instruction |= UART_receive() << 8;
     976:	0e 94 9e 02 	call	0x53c	; 0x53c <UART_receive>
     97a:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <instruction>
     97e:	30 91 7d 00 	lds	r19, 0x007D	; 0x80007d <instruction+0x1>
     982:	38 2b       	or	r19, r24
     984:	30 93 7d 00 	sts	0x007D, r19	; 0x80007d <instruction+0x1>
     988:	20 93 7c 00 	sts	0x007C, r18	; 0x80007c <instruction>
		opCode = instruction >> 12;
     98c:	e0 90 7c 00 	lds	r14, 0x007C	; 0x80007c <instruction>
     990:	f0 90 7d 00 	lds	r15, 0x007D	; 0x80007d <instruction+0x1>
     994:	ef 2c       	mov	r14, r15
     996:	ff 24       	eor	r15, r15
     998:	e6 94       	lsr	r14
     99a:	e6 94       	lsr	r14
     99c:	e6 94       	lsr	r14
     99e:	e6 94       	lsr	r14
		
		setControl(instruction);
     9a0:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <instruction>
     9a4:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <instruction+0x1>
     9a8:	0e 94 78 03 	call	0x6f0	; 0x6f0 <setControl>
				
		PORTC = (branchOp << 5) | (aluOp << 2) | (memoryOp);
     9ac:	40 91 88 00 	lds	r20, 0x0088	; 0x800088 <branchOp>
     9b0:	50 91 89 00 	lds	r21, 0x0089	; 0x800089 <branchOp+0x1>
     9b4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <aluOp>
     9b8:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <aluOp+0x1>
     9bc:	20 91 82 00 	lds	r18, 0x0082	; 0x800082 <memoryOp>
     9c0:	30 91 83 00 	lds	r19, 0x0083	; 0x800083 <memoryOp+0x1>
     9c4:	42 95       	swap	r20
     9c6:	44 0f       	add	r20, r20
     9c8:	40 7e       	andi	r20, 0xE0	; 224
     9ca:	88 0f       	add	r24, r24
     9cc:	88 0f       	add	r24, r24
     9ce:	84 2b       	or	r24, r20
     9d0:	82 2b       	or	r24, r18
     9d2:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9d4:	ff e9       	ldi	r31, 0x9F	; 159
     9d6:	26 e8       	ldi	r18, 0x86	; 134
     9d8:	81 e0       	ldi	r24, 0x01	; 1
     9da:	f1 50       	subi	r31, 0x01	; 1
     9dc:	20 40       	sbci	r18, 0x00	; 0
     9de:	80 40       	sbci	r24, 0x00	; 0
     9e0:	e1 f7       	brne	.-8      	; 0x9da <__stack+0x17b>
     9e2:	00 c0       	rjmp	.+0      	; 0x9e4 <__stack+0x185>
     9e4:	00 00       	nop
		_delay_ms(500);
		
		if(opCode == L) {
     9e6:	0f b6       	in	r0, 0x3f	; 63
     9e8:	f8 94       	cli
     9ea:	de bf       	out	0x3e, r29	; 62
     9ec:	0f be       	out	0x3f, r0	; 63
     9ee:	cd bf       	out	0x3d, r28	; 61
     9f0:	f4 e0       	ldi	r31, 0x04	; 4
     9f2:	ef 16       	cp	r14, r31
     9f4:	f1 04       	cpc	r15, r1
     9f6:	b9 f5       	brne	.+110    	; 0xa66 <__stack+0x207>
			PORTA = readRegister(readRegister2); // prev : 1
     9f8:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <readRegister2>
     9fc:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <readRegister2+0x1>
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
}

uint16_t readRegister(uint16_t regAddress){
	return registers[regAddress];
     a00:	ea 59       	subi	r30, 0x9A	; 154
     a02:	ff 4f       	sbci	r31, 0xFF	; 255
     a04:	80 81       	ld	r24, Z
				
		PORTC = (branchOp << 5) | (aluOp << 2) | (memoryOp);
		_delay_ms(500);
		
		if(opCode == L) {
			PORTA = readRegister(readRegister2); // prev : 1
     a06:	8b bb       	out	0x1b, r24	; 27
     a08:	2a c0       	rjmp	.+84     	; 0xa5e <__stack+0x1ff>
		}
		
		if(opCode != L && opCode != N && opCode != O && opCode != P) {
     a0a:	2f e0       	ldi	r18, 0x0F	; 15
     a0c:	e2 16       	cp	r14, r18
     a0e:	f1 04       	cpc	r15, r1
     a10:	b9 f0       	breq	.+46     	; 0xa40 <__stack+0x1e1>
     a12:	86 e0       	ldi	r24, 0x06	; 6
     a14:	e8 16       	cp	r14, r24
     a16:	f1 04       	cpc	r15, r1
     a18:	d9 f0       	breq	.+54     	; 0xa50 <__stack+0x1f1>
			writeData = (PINA >> 4) & 0x0F;
     a1a:	89 b3       	in	r24, 0x19	; 25
     a1c:	82 95       	swap	r24
     a1e:	8f 70       	andi	r24, 0x0F	; 15
			writeRegister(writeRegister1, writeData);
     a20:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <writeRegister1>
     a24:	f0 91 7f 00 	lds	r31, 0x007F	; 0x80007f <writeRegister1+0x1>
uint16_t readRegister(uint16_t regAddress){
	return registers[regAddress];
}

void writeRegister(uint16_t regAddress, uint16_t data){
	registers[regAddress] = data;
     a28:	ea 59       	subi	r30, 0x9A	; 154
     a2a:	ff 4f       	sbci	r31, 0xFF	; 255
     a2c:	80 83       	st	Z, r24
     a2e:	17 c0       	rjmp	.+46     	; 0xa5e <__stack+0x1ff>
			writeRegister(writeRegister1, writeData);
		}
				
		
		if(opCode == N) {
			UART_send(instruction & 0x0F);
     a30:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <instruction>
     a34:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <instruction+0x1>
     a38:	8f 70       	andi	r24, 0x0F	; 15
     a3a:	0e 94 9a 02 	call	0x534	; 0x534 <UART_send>
     a3e:	1e cf       	rjmp	.-452    	; 0x87c <__stack+0x1d>
		}
		else if(opCode == O) {
			UART_send(instruction & 0x0F);
     a40:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <instruction>
     a44:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <instruction+0x1>
     a48:	8f 70       	andi	r24, 0x0F	; 15
     a4a:	0e 94 9a 02 	call	0x534	; 0x534 <UART_send>
     a4e:	16 cf       	rjmp	.-468    	; 0x87c <__stack+0x1d>
		}
		else if(opCode == P) {
			UART_send(jumpAddress);
     a50:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <jumpAddress>
     a54:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <jumpAddress+0x1>
     a58:	0e 94 9a 02 	call	0x534	; 0x534 <UART_send>
     a5c:	0f cf       	rjmp	.-482    	; 0x87c <__stack+0x1d>
		}
		else {
			UART_send(0);
     a5e:	80 e0       	ldi	r24, 0x00	; 0
     a60:	0e 94 9a 02 	call	0x534	; 0x534 <UART_send>
     a64:	0b cf       	rjmp	.-490    	; 0x87c <__stack+0x1d>
		
		if(opCode == L) {
			PORTA = readRegister(readRegister2); // prev : 1
		}
		
		if(opCode != L && opCode != N && opCode != O && opCode != P) {
     a66:	98 e0       	ldi	r25, 0x08	; 8
     a68:	e9 16       	cp	r14, r25
     a6a:	f1 04       	cpc	r15, r1
     a6c:	71 f6       	brne	.-100    	; 0xa0a <__stack+0x1ab>
     a6e:	e0 cf       	rjmp	.-64     	; 0xa30 <__stack+0x1d1>

00000a70 <malloc>:
     a70:	0f 93       	push	r16
     a72:	1f 93       	push	r17
     a74:	cf 93       	push	r28
     a76:	df 93       	push	r29
     a78:	82 30       	cpi	r24, 0x02	; 2
     a7a:	91 05       	cpc	r25, r1
     a7c:	10 f4       	brcc	.+4      	; 0xa82 <malloc+0x12>
     a7e:	82 e0       	ldi	r24, 0x02	; 2
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	e0 91 8e 00 	lds	r30, 0x008E	; 0x80008e <__flp>
     a86:	f0 91 8f 00 	lds	r31, 0x008F	; 0x80008f <__flp+0x1>
     a8a:	20 e0       	ldi	r18, 0x00	; 0
     a8c:	30 e0       	ldi	r19, 0x00	; 0
     a8e:	a0 e0       	ldi	r26, 0x00	; 0
     a90:	b0 e0       	ldi	r27, 0x00	; 0
     a92:	30 97       	sbiw	r30, 0x00	; 0
     a94:	19 f1       	breq	.+70     	; 0xadc <malloc+0x6c>
     a96:	40 81       	ld	r20, Z
     a98:	51 81       	ldd	r21, Z+1	; 0x01
     a9a:	02 81       	ldd	r16, Z+2	; 0x02
     a9c:	13 81       	ldd	r17, Z+3	; 0x03
     a9e:	48 17       	cp	r20, r24
     aa0:	59 07       	cpc	r21, r25
     aa2:	c8 f0       	brcs	.+50     	; 0xad6 <malloc+0x66>
     aa4:	84 17       	cp	r24, r20
     aa6:	95 07       	cpc	r25, r21
     aa8:	69 f4       	brne	.+26     	; 0xac4 <malloc+0x54>
     aaa:	10 97       	sbiw	r26, 0x00	; 0
     aac:	31 f0       	breq	.+12     	; 0xaba <malloc+0x4a>
     aae:	12 96       	adiw	r26, 0x02	; 2
     ab0:	0c 93       	st	X, r16
     ab2:	12 97       	sbiw	r26, 0x02	; 2
     ab4:	13 96       	adiw	r26, 0x03	; 3
     ab6:	1c 93       	st	X, r17
     ab8:	27 c0       	rjmp	.+78     	; 0xb08 <malloc+0x98>
     aba:	00 93 8e 00 	sts	0x008E, r16	; 0x80008e <__flp>
     abe:	10 93 8f 00 	sts	0x008F, r17	; 0x80008f <__flp+0x1>
     ac2:	22 c0       	rjmp	.+68     	; 0xb08 <malloc+0x98>
     ac4:	21 15       	cp	r18, r1
     ac6:	31 05       	cpc	r19, r1
     ac8:	19 f0       	breq	.+6      	; 0xad0 <malloc+0x60>
     aca:	42 17       	cp	r20, r18
     acc:	53 07       	cpc	r21, r19
     ace:	18 f4       	brcc	.+6      	; 0xad6 <malloc+0x66>
     ad0:	9a 01       	movw	r18, r20
     ad2:	bd 01       	movw	r22, r26
     ad4:	ef 01       	movw	r28, r30
     ad6:	df 01       	movw	r26, r30
     ad8:	f8 01       	movw	r30, r16
     ada:	db cf       	rjmp	.-74     	; 0xa92 <malloc+0x22>
     adc:	21 15       	cp	r18, r1
     ade:	31 05       	cpc	r19, r1
     ae0:	f9 f0       	breq	.+62     	; 0xb20 <malloc+0xb0>
     ae2:	28 1b       	sub	r18, r24
     ae4:	39 0b       	sbc	r19, r25
     ae6:	24 30       	cpi	r18, 0x04	; 4
     ae8:	31 05       	cpc	r19, r1
     aea:	80 f4       	brcc	.+32     	; 0xb0c <malloc+0x9c>
     aec:	8a 81       	ldd	r24, Y+2	; 0x02
     aee:	9b 81       	ldd	r25, Y+3	; 0x03
     af0:	61 15       	cp	r22, r1
     af2:	71 05       	cpc	r23, r1
     af4:	21 f0       	breq	.+8      	; 0xafe <malloc+0x8e>
     af6:	fb 01       	movw	r30, r22
     af8:	93 83       	std	Z+3, r25	; 0x03
     afa:	82 83       	std	Z+2, r24	; 0x02
     afc:	04 c0       	rjmp	.+8      	; 0xb06 <malloc+0x96>
     afe:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <__flp+0x1>
     b02:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <__flp>
     b06:	fe 01       	movw	r30, r28
     b08:	32 96       	adiw	r30, 0x02	; 2
     b0a:	44 c0       	rjmp	.+136    	; 0xb94 <malloc+0x124>
     b0c:	fe 01       	movw	r30, r28
     b0e:	e2 0f       	add	r30, r18
     b10:	f3 1f       	adc	r31, r19
     b12:	81 93       	st	Z+, r24
     b14:	91 93       	st	Z+, r25
     b16:	22 50       	subi	r18, 0x02	; 2
     b18:	31 09       	sbc	r19, r1
     b1a:	39 83       	std	Y+1, r19	; 0x01
     b1c:	28 83       	st	Y, r18
     b1e:	3a c0       	rjmp	.+116    	; 0xb94 <malloc+0x124>
     b20:	20 91 8c 00 	lds	r18, 0x008C	; 0x80008c <__brkval>
     b24:	30 91 8d 00 	lds	r19, 0x008D	; 0x80008d <__brkval+0x1>
     b28:	23 2b       	or	r18, r19
     b2a:	41 f4       	brne	.+16     	; 0xb3c <malloc+0xcc>
     b2c:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
     b30:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
     b34:	30 93 8d 00 	sts	0x008D, r19	; 0x80008d <__brkval+0x1>
     b38:	20 93 8c 00 	sts	0x008C, r18	; 0x80008c <__brkval>
     b3c:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     b40:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     b44:	21 15       	cp	r18, r1
     b46:	31 05       	cpc	r19, r1
     b48:	41 f4       	brne	.+16     	; 0xb5a <malloc+0xea>
     b4a:	2d b7       	in	r18, 0x3d	; 61
     b4c:	3e b7       	in	r19, 0x3e	; 62
     b4e:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
     b52:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
     b56:	24 1b       	sub	r18, r20
     b58:	35 0b       	sbc	r19, r21
     b5a:	e0 91 8c 00 	lds	r30, 0x008C	; 0x80008c <__brkval>
     b5e:	f0 91 8d 00 	lds	r31, 0x008D	; 0x80008d <__brkval+0x1>
     b62:	e2 17       	cp	r30, r18
     b64:	f3 07       	cpc	r31, r19
     b66:	a0 f4       	brcc	.+40     	; 0xb90 <malloc+0x120>
     b68:	2e 1b       	sub	r18, r30
     b6a:	3f 0b       	sbc	r19, r31
     b6c:	28 17       	cp	r18, r24
     b6e:	39 07       	cpc	r19, r25
     b70:	78 f0       	brcs	.+30     	; 0xb90 <malloc+0x120>
     b72:	ac 01       	movw	r20, r24
     b74:	4e 5f       	subi	r20, 0xFE	; 254
     b76:	5f 4f       	sbci	r21, 0xFF	; 255
     b78:	24 17       	cp	r18, r20
     b7a:	35 07       	cpc	r19, r21
     b7c:	48 f0       	brcs	.+18     	; 0xb90 <malloc+0x120>
     b7e:	4e 0f       	add	r20, r30
     b80:	5f 1f       	adc	r21, r31
     b82:	50 93 8d 00 	sts	0x008D, r21	; 0x80008d <__brkval+0x1>
     b86:	40 93 8c 00 	sts	0x008C, r20	; 0x80008c <__brkval>
     b8a:	81 93       	st	Z+, r24
     b8c:	91 93       	st	Z+, r25
     b8e:	02 c0       	rjmp	.+4      	; 0xb94 <malloc+0x124>
     b90:	e0 e0       	ldi	r30, 0x00	; 0
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	cf 01       	movw	r24, r30
     b96:	df 91       	pop	r29
     b98:	cf 91       	pop	r28
     b9a:	1f 91       	pop	r17
     b9c:	0f 91       	pop	r16
     b9e:	08 95       	ret

00000ba0 <free>:
     ba0:	cf 93       	push	r28
     ba2:	df 93       	push	r29
     ba4:	00 97       	sbiw	r24, 0x00	; 0
     ba6:	09 f4       	brne	.+2      	; 0xbaa <free+0xa>
     ba8:	81 c0       	rjmp	.+258    	; 0xcac <free+0x10c>
     baa:	fc 01       	movw	r30, r24
     bac:	32 97       	sbiw	r30, 0x02	; 2
     bae:	13 82       	std	Z+3, r1	; 0x03
     bb0:	12 82       	std	Z+2, r1	; 0x02
     bb2:	a0 91 8e 00 	lds	r26, 0x008E	; 0x80008e <__flp>
     bb6:	b0 91 8f 00 	lds	r27, 0x008F	; 0x80008f <__flp+0x1>
     bba:	10 97       	sbiw	r26, 0x00	; 0
     bbc:	81 f4       	brne	.+32     	; 0xbde <free+0x3e>
     bbe:	20 81       	ld	r18, Z
     bc0:	31 81       	ldd	r19, Z+1	; 0x01
     bc2:	82 0f       	add	r24, r18
     bc4:	93 1f       	adc	r25, r19
     bc6:	20 91 8c 00 	lds	r18, 0x008C	; 0x80008c <__brkval>
     bca:	30 91 8d 00 	lds	r19, 0x008D	; 0x80008d <__brkval+0x1>
     bce:	28 17       	cp	r18, r24
     bd0:	39 07       	cpc	r19, r25
     bd2:	51 f5       	brne	.+84     	; 0xc28 <free+0x88>
     bd4:	f0 93 8d 00 	sts	0x008D, r31	; 0x80008d <__brkval+0x1>
     bd8:	e0 93 8c 00 	sts	0x008C, r30	; 0x80008c <__brkval>
     bdc:	67 c0       	rjmp	.+206    	; 0xcac <free+0x10c>
     bde:	ed 01       	movw	r28, r26
     be0:	20 e0       	ldi	r18, 0x00	; 0
     be2:	30 e0       	ldi	r19, 0x00	; 0
     be4:	ce 17       	cp	r28, r30
     be6:	df 07       	cpc	r29, r31
     be8:	40 f4       	brcc	.+16     	; 0xbfa <free+0x5a>
     bea:	4a 81       	ldd	r20, Y+2	; 0x02
     bec:	5b 81       	ldd	r21, Y+3	; 0x03
     bee:	9e 01       	movw	r18, r28
     bf0:	41 15       	cp	r20, r1
     bf2:	51 05       	cpc	r21, r1
     bf4:	f1 f0       	breq	.+60     	; 0xc32 <free+0x92>
     bf6:	ea 01       	movw	r28, r20
     bf8:	f5 cf       	rjmp	.-22     	; 0xbe4 <free+0x44>
     bfa:	d3 83       	std	Z+3, r29	; 0x03
     bfc:	c2 83       	std	Z+2, r28	; 0x02
     bfe:	40 81       	ld	r20, Z
     c00:	51 81       	ldd	r21, Z+1	; 0x01
     c02:	84 0f       	add	r24, r20
     c04:	95 1f       	adc	r25, r21
     c06:	c8 17       	cp	r28, r24
     c08:	d9 07       	cpc	r29, r25
     c0a:	59 f4       	brne	.+22     	; 0xc22 <free+0x82>
     c0c:	88 81       	ld	r24, Y
     c0e:	99 81       	ldd	r25, Y+1	; 0x01
     c10:	84 0f       	add	r24, r20
     c12:	95 1f       	adc	r25, r21
     c14:	02 96       	adiw	r24, 0x02	; 2
     c16:	91 83       	std	Z+1, r25	; 0x01
     c18:	80 83       	st	Z, r24
     c1a:	8a 81       	ldd	r24, Y+2	; 0x02
     c1c:	9b 81       	ldd	r25, Y+3	; 0x03
     c1e:	93 83       	std	Z+3, r25	; 0x03
     c20:	82 83       	std	Z+2, r24	; 0x02
     c22:	21 15       	cp	r18, r1
     c24:	31 05       	cpc	r19, r1
     c26:	29 f4       	brne	.+10     	; 0xc32 <free+0x92>
     c28:	f0 93 8f 00 	sts	0x008F, r31	; 0x80008f <__flp+0x1>
     c2c:	e0 93 8e 00 	sts	0x008E, r30	; 0x80008e <__flp>
     c30:	3d c0       	rjmp	.+122    	; 0xcac <free+0x10c>
     c32:	e9 01       	movw	r28, r18
     c34:	fb 83       	std	Y+3, r31	; 0x03
     c36:	ea 83       	std	Y+2, r30	; 0x02
     c38:	49 91       	ld	r20, Y+
     c3a:	59 91       	ld	r21, Y+
     c3c:	c4 0f       	add	r28, r20
     c3e:	d5 1f       	adc	r29, r21
     c40:	ec 17       	cp	r30, r28
     c42:	fd 07       	cpc	r31, r29
     c44:	61 f4       	brne	.+24     	; 0xc5e <free+0xbe>
     c46:	80 81       	ld	r24, Z
     c48:	91 81       	ldd	r25, Z+1	; 0x01
     c4a:	84 0f       	add	r24, r20
     c4c:	95 1f       	adc	r25, r21
     c4e:	02 96       	adiw	r24, 0x02	; 2
     c50:	e9 01       	movw	r28, r18
     c52:	99 83       	std	Y+1, r25	; 0x01
     c54:	88 83       	st	Y, r24
     c56:	82 81       	ldd	r24, Z+2	; 0x02
     c58:	93 81       	ldd	r25, Z+3	; 0x03
     c5a:	9b 83       	std	Y+3, r25	; 0x03
     c5c:	8a 83       	std	Y+2, r24	; 0x02
     c5e:	e0 e0       	ldi	r30, 0x00	; 0
     c60:	f0 e0       	ldi	r31, 0x00	; 0
     c62:	12 96       	adiw	r26, 0x02	; 2
     c64:	8d 91       	ld	r24, X+
     c66:	9c 91       	ld	r25, X
     c68:	13 97       	sbiw	r26, 0x03	; 3
     c6a:	00 97       	sbiw	r24, 0x00	; 0
     c6c:	19 f0       	breq	.+6      	; 0xc74 <free+0xd4>
     c6e:	fd 01       	movw	r30, r26
     c70:	dc 01       	movw	r26, r24
     c72:	f7 cf       	rjmp	.-18     	; 0xc62 <free+0xc2>
     c74:	8d 91       	ld	r24, X+
     c76:	9c 91       	ld	r25, X
     c78:	11 97       	sbiw	r26, 0x01	; 1
     c7a:	9d 01       	movw	r18, r26
     c7c:	2e 5f       	subi	r18, 0xFE	; 254
     c7e:	3f 4f       	sbci	r19, 0xFF	; 255
     c80:	82 0f       	add	r24, r18
     c82:	93 1f       	adc	r25, r19
     c84:	20 91 8c 00 	lds	r18, 0x008C	; 0x80008c <__brkval>
     c88:	30 91 8d 00 	lds	r19, 0x008D	; 0x80008d <__brkval+0x1>
     c8c:	28 17       	cp	r18, r24
     c8e:	39 07       	cpc	r19, r25
     c90:	69 f4       	brne	.+26     	; 0xcac <free+0x10c>
     c92:	30 97       	sbiw	r30, 0x00	; 0
     c94:	29 f4       	brne	.+10     	; 0xca0 <free+0x100>
     c96:	10 92 8f 00 	sts	0x008F, r1	; 0x80008f <__flp+0x1>
     c9a:	10 92 8e 00 	sts	0x008E, r1	; 0x80008e <__flp>
     c9e:	02 c0       	rjmp	.+4      	; 0xca4 <free+0x104>
     ca0:	13 82       	std	Z+3, r1	; 0x03
     ca2:	12 82       	std	Z+2, r1	; 0x02
     ca4:	b0 93 8d 00 	sts	0x008D, r27	; 0x80008d <__brkval+0x1>
     ca8:	a0 93 8c 00 	sts	0x008C, r26	; 0x80008c <__brkval>
     cac:	df 91       	pop	r29
     cae:	cf 91       	pop	r28
     cb0:	08 95       	ret

00000cb2 <strdup>:
     cb2:	0f 93       	push	r16
     cb4:	1f 93       	push	r17
     cb6:	cf 93       	push	r28
     cb8:	df 93       	push	r29
     cba:	8c 01       	movw	r16, r24
     cbc:	fc 01       	movw	r30, r24
     cbe:	01 90       	ld	r0, Z+
     cc0:	00 20       	and	r0, r0
     cc2:	e9 f7       	brne	.-6      	; 0xcbe <strdup+0xc>
     cc4:	cf 01       	movw	r24, r30
     cc6:	80 1b       	sub	r24, r16
     cc8:	91 0b       	sbc	r25, r17
     cca:	0e 94 38 05 	call	0xa70	; 0xa70 <malloc>
     cce:	ec 01       	movw	r28, r24
     cd0:	00 97       	sbiw	r24, 0x00	; 0
     cd2:	19 f0       	breq	.+6      	; 0xcda <strdup+0x28>
     cd4:	b8 01       	movw	r22, r16
     cd6:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <strcpy>
     cda:	ce 01       	movw	r24, r28
     cdc:	df 91       	pop	r29
     cde:	cf 91       	pop	r28
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	08 95       	ret

00000ce6 <memset>:
     ce6:	dc 01       	movw	r26, r24
     ce8:	01 c0       	rjmp	.+2      	; 0xcec <memset+0x6>
     cea:	6d 93       	st	X+, r22
     cec:	41 50       	subi	r20, 0x01	; 1
     cee:	50 40       	sbci	r21, 0x00	; 0
     cf0:	e0 f7       	brcc	.-8      	; 0xcea <memset+0x4>
     cf2:	08 95       	ret

00000cf4 <strcpy>:
     cf4:	fb 01       	movw	r30, r22
     cf6:	dc 01       	movw	r26, r24
     cf8:	01 90       	ld	r0, Z+
     cfa:	0d 92       	st	X+, r0
     cfc:	00 20       	and	r0, r0
     cfe:	e1 f7       	brne	.-8      	; 0xcf8 <strcpy+0x4>
     d00:	08 95       	ret

00000d02 <__itoa_ncheck>:
     d02:	bb 27       	eor	r27, r27
     d04:	4a 30       	cpi	r20, 0x0A	; 10
     d06:	31 f4       	brne	.+12     	; 0xd14 <__itoa_ncheck+0x12>
     d08:	99 23       	and	r25, r25
     d0a:	22 f4       	brpl	.+8      	; 0xd14 <__itoa_ncheck+0x12>
     d0c:	bd e2       	ldi	r27, 0x2D	; 45
     d0e:	90 95       	com	r25
     d10:	81 95       	neg	r24
     d12:	9f 4f       	sbci	r25, 0xFF	; 255
     d14:	0c 94 8d 06 	jmp	0xd1a	; 0xd1a <__utoa_common>

00000d18 <__utoa_ncheck>:
     d18:	bb 27       	eor	r27, r27

00000d1a <__utoa_common>:
     d1a:	fb 01       	movw	r30, r22
     d1c:	55 27       	eor	r21, r21
     d1e:	aa 27       	eor	r26, r26
     d20:	88 0f       	add	r24, r24
     d22:	99 1f       	adc	r25, r25
     d24:	aa 1f       	adc	r26, r26
     d26:	a4 17       	cp	r26, r20
     d28:	10 f0       	brcs	.+4      	; 0xd2e <__utoa_common+0x14>
     d2a:	a4 1b       	sub	r26, r20
     d2c:	83 95       	inc	r24
     d2e:	50 51       	subi	r21, 0x10	; 16
     d30:	b9 f7       	brne	.-18     	; 0xd20 <__utoa_common+0x6>
     d32:	a0 5d       	subi	r26, 0xD0	; 208
     d34:	aa 33       	cpi	r26, 0x3A	; 58
     d36:	08 f0       	brcs	.+2      	; 0xd3a <__utoa_common+0x20>
     d38:	a9 5d       	subi	r26, 0xD9	; 217
     d3a:	a1 93       	st	Z+, r26
     d3c:	00 97       	sbiw	r24, 0x00	; 0
     d3e:	79 f7       	brne	.-34     	; 0xd1e <__utoa_common+0x4>
     d40:	b1 11       	cpse	r27, r1
     d42:	b1 93       	st	Z+, r27
     d44:	11 92       	st	Z+, r1
     d46:	cb 01       	movw	r24, r22
     d48:	0c 94 bf 08 	jmp	0x117e	; 0x117e <strrev>

00000d4c <sprintf>:
     d4c:	ae e0       	ldi	r26, 0x0E	; 14
     d4e:	b0 e0       	ldi	r27, 0x00	; 0
     d50:	ec ea       	ldi	r30, 0xAC	; 172
     d52:	f6 e0       	ldi	r31, 0x06	; 6
     d54:	0c 94 77 09 	jmp	0x12ee	; 0x12ee <__prologue_saves__+0x1c>
     d58:	0d 89       	ldd	r16, Y+21	; 0x15
     d5a:	1e 89       	ldd	r17, Y+22	; 0x16
     d5c:	86 e0       	ldi	r24, 0x06	; 6
     d5e:	8c 83       	std	Y+4, r24	; 0x04
     d60:	1a 83       	std	Y+2, r17	; 0x02
     d62:	09 83       	std	Y+1, r16	; 0x01
     d64:	8f ef       	ldi	r24, 0xFF	; 255
     d66:	9f e7       	ldi	r25, 0x7F	; 127
     d68:	9e 83       	std	Y+6, r25	; 0x06
     d6a:	8d 83       	std	Y+5, r24	; 0x05
     d6c:	ae 01       	movw	r20, r28
     d6e:	47 5e       	subi	r20, 0xE7	; 231
     d70:	5f 4f       	sbci	r21, 0xFF	; 255
     d72:	6f 89       	ldd	r22, Y+23	; 0x17
     d74:	78 8d       	ldd	r23, Y+24	; 0x18
     d76:	ce 01       	movw	r24, r28
     d78:	01 96       	adiw	r24, 0x01	; 1
     d7a:	0e 94 c8 06 	call	0xd90	; 0xd90 <vfprintf>
     d7e:	ef 81       	ldd	r30, Y+7	; 0x07
     d80:	f8 85       	ldd	r31, Y+8	; 0x08
     d82:	e0 0f       	add	r30, r16
     d84:	f1 1f       	adc	r31, r17
     d86:	10 82       	st	Z, r1
     d88:	2e 96       	adiw	r28, 0x0e	; 14
     d8a:	e4 e0       	ldi	r30, 0x04	; 4
     d8c:	0c 94 93 09 	jmp	0x1326	; 0x1326 <__epilogue_restores__+0x1c>

00000d90 <vfprintf>:
     d90:	ab e0       	ldi	r26, 0x0B	; 11
     d92:	b0 e0       	ldi	r27, 0x00	; 0
     d94:	ee ec       	ldi	r30, 0xCE	; 206
     d96:	f6 e0       	ldi	r31, 0x06	; 6
     d98:	0c 94 69 09 	jmp	0x12d2	; 0x12d2 <__prologue_saves__>
     d9c:	6c 01       	movw	r12, r24
     d9e:	7b 01       	movw	r14, r22
     da0:	8a 01       	movw	r16, r20
     da2:	fc 01       	movw	r30, r24
     da4:	17 82       	std	Z+7, r1	; 0x07
     da6:	16 82       	std	Z+6, r1	; 0x06
     da8:	83 81       	ldd	r24, Z+3	; 0x03
     daa:	81 ff       	sbrs	r24, 1
     dac:	cc c1       	rjmp	.+920    	; 0x1146 <vfprintf+0x3b6>
     dae:	ce 01       	movw	r24, r28
     db0:	01 96       	adiw	r24, 0x01	; 1
     db2:	3c 01       	movw	r6, r24
     db4:	f6 01       	movw	r30, r12
     db6:	93 81       	ldd	r25, Z+3	; 0x03
     db8:	f7 01       	movw	r30, r14
     dba:	93 fd       	sbrc	r25, 3
     dbc:	85 91       	lpm	r24, Z+
     dbe:	93 ff       	sbrs	r25, 3
     dc0:	81 91       	ld	r24, Z+
     dc2:	7f 01       	movw	r14, r30
     dc4:	88 23       	and	r24, r24
     dc6:	09 f4       	brne	.+2      	; 0xdca <vfprintf+0x3a>
     dc8:	ba c1       	rjmp	.+884    	; 0x113e <vfprintf+0x3ae>
     dca:	85 32       	cpi	r24, 0x25	; 37
     dcc:	39 f4       	brne	.+14     	; 0xddc <vfprintf+0x4c>
     dce:	93 fd       	sbrc	r25, 3
     dd0:	85 91       	lpm	r24, Z+
     dd2:	93 ff       	sbrs	r25, 3
     dd4:	81 91       	ld	r24, Z+
     dd6:	7f 01       	movw	r14, r30
     dd8:	85 32       	cpi	r24, 0x25	; 37
     dda:	29 f4       	brne	.+10     	; 0xde6 <vfprintf+0x56>
     ddc:	b6 01       	movw	r22, r12
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	0e 94 cf 08 	call	0x119e	; 0x119e <fputc>
     de4:	e7 cf       	rjmp	.-50     	; 0xdb4 <vfprintf+0x24>
     de6:	91 2c       	mov	r9, r1
     de8:	21 2c       	mov	r2, r1
     dea:	31 2c       	mov	r3, r1
     dec:	ff e1       	ldi	r31, 0x1F	; 31
     dee:	f3 15       	cp	r31, r3
     df0:	d8 f0       	brcs	.+54     	; 0xe28 <vfprintf+0x98>
     df2:	8b 32       	cpi	r24, 0x2B	; 43
     df4:	79 f0       	breq	.+30     	; 0xe14 <vfprintf+0x84>
     df6:	38 f4       	brcc	.+14     	; 0xe06 <vfprintf+0x76>
     df8:	80 32       	cpi	r24, 0x20	; 32
     dfa:	79 f0       	breq	.+30     	; 0xe1a <vfprintf+0x8a>
     dfc:	83 32       	cpi	r24, 0x23	; 35
     dfe:	a1 f4       	brne	.+40     	; 0xe28 <vfprintf+0x98>
     e00:	23 2d       	mov	r18, r3
     e02:	20 61       	ori	r18, 0x10	; 16
     e04:	1d c0       	rjmp	.+58     	; 0xe40 <vfprintf+0xb0>
     e06:	8d 32       	cpi	r24, 0x2D	; 45
     e08:	61 f0       	breq	.+24     	; 0xe22 <vfprintf+0x92>
     e0a:	80 33       	cpi	r24, 0x30	; 48
     e0c:	69 f4       	brne	.+26     	; 0xe28 <vfprintf+0x98>
     e0e:	23 2d       	mov	r18, r3
     e10:	21 60       	ori	r18, 0x01	; 1
     e12:	16 c0       	rjmp	.+44     	; 0xe40 <vfprintf+0xb0>
     e14:	83 2d       	mov	r24, r3
     e16:	82 60       	ori	r24, 0x02	; 2
     e18:	38 2e       	mov	r3, r24
     e1a:	e3 2d       	mov	r30, r3
     e1c:	e4 60       	ori	r30, 0x04	; 4
     e1e:	3e 2e       	mov	r3, r30
     e20:	2a c0       	rjmp	.+84     	; 0xe76 <vfprintf+0xe6>
     e22:	f3 2d       	mov	r31, r3
     e24:	f8 60       	ori	r31, 0x08	; 8
     e26:	1d c0       	rjmp	.+58     	; 0xe62 <vfprintf+0xd2>
     e28:	37 fc       	sbrc	r3, 7
     e2a:	2d c0       	rjmp	.+90     	; 0xe86 <vfprintf+0xf6>
     e2c:	20 ed       	ldi	r18, 0xD0	; 208
     e2e:	28 0f       	add	r18, r24
     e30:	2a 30       	cpi	r18, 0x0A	; 10
     e32:	40 f0       	brcs	.+16     	; 0xe44 <vfprintf+0xb4>
     e34:	8e 32       	cpi	r24, 0x2E	; 46
     e36:	b9 f4       	brne	.+46     	; 0xe66 <vfprintf+0xd6>
     e38:	36 fc       	sbrc	r3, 6
     e3a:	81 c1       	rjmp	.+770    	; 0x113e <vfprintf+0x3ae>
     e3c:	23 2d       	mov	r18, r3
     e3e:	20 64       	ori	r18, 0x40	; 64
     e40:	32 2e       	mov	r3, r18
     e42:	19 c0       	rjmp	.+50     	; 0xe76 <vfprintf+0xe6>
     e44:	36 fe       	sbrs	r3, 6
     e46:	06 c0       	rjmp	.+12     	; 0xe54 <vfprintf+0xc4>
     e48:	8a e0       	ldi	r24, 0x0A	; 10
     e4a:	98 9e       	mul	r9, r24
     e4c:	20 0d       	add	r18, r0
     e4e:	11 24       	eor	r1, r1
     e50:	92 2e       	mov	r9, r18
     e52:	11 c0       	rjmp	.+34     	; 0xe76 <vfprintf+0xe6>
     e54:	ea e0       	ldi	r30, 0x0A	; 10
     e56:	2e 9e       	mul	r2, r30
     e58:	20 0d       	add	r18, r0
     e5a:	11 24       	eor	r1, r1
     e5c:	22 2e       	mov	r2, r18
     e5e:	f3 2d       	mov	r31, r3
     e60:	f0 62       	ori	r31, 0x20	; 32
     e62:	3f 2e       	mov	r3, r31
     e64:	08 c0       	rjmp	.+16     	; 0xe76 <vfprintf+0xe6>
     e66:	8c 36       	cpi	r24, 0x6C	; 108
     e68:	21 f4       	brne	.+8      	; 0xe72 <vfprintf+0xe2>
     e6a:	83 2d       	mov	r24, r3
     e6c:	80 68       	ori	r24, 0x80	; 128
     e6e:	38 2e       	mov	r3, r24
     e70:	02 c0       	rjmp	.+4      	; 0xe76 <vfprintf+0xe6>
     e72:	88 36       	cpi	r24, 0x68	; 104
     e74:	41 f4       	brne	.+16     	; 0xe86 <vfprintf+0xf6>
     e76:	f7 01       	movw	r30, r14
     e78:	93 fd       	sbrc	r25, 3
     e7a:	85 91       	lpm	r24, Z+
     e7c:	93 ff       	sbrs	r25, 3
     e7e:	81 91       	ld	r24, Z+
     e80:	7f 01       	movw	r14, r30
     e82:	81 11       	cpse	r24, r1
     e84:	b3 cf       	rjmp	.-154    	; 0xdec <vfprintf+0x5c>
     e86:	98 2f       	mov	r25, r24
     e88:	9f 7d       	andi	r25, 0xDF	; 223
     e8a:	95 54       	subi	r25, 0x45	; 69
     e8c:	93 30       	cpi	r25, 0x03	; 3
     e8e:	28 f4       	brcc	.+10     	; 0xe9a <vfprintf+0x10a>
     e90:	0c 5f       	subi	r16, 0xFC	; 252
     e92:	1f 4f       	sbci	r17, 0xFF	; 255
     e94:	9f e3       	ldi	r25, 0x3F	; 63
     e96:	99 83       	std	Y+1, r25	; 0x01
     e98:	0d c0       	rjmp	.+26     	; 0xeb4 <vfprintf+0x124>
     e9a:	83 36       	cpi	r24, 0x63	; 99
     e9c:	31 f0       	breq	.+12     	; 0xeaa <vfprintf+0x11a>
     e9e:	83 37       	cpi	r24, 0x73	; 115
     ea0:	71 f0       	breq	.+28     	; 0xebe <vfprintf+0x12e>
     ea2:	83 35       	cpi	r24, 0x53	; 83
     ea4:	09 f0       	breq	.+2      	; 0xea8 <vfprintf+0x118>
     ea6:	59 c0       	rjmp	.+178    	; 0xf5a <vfprintf+0x1ca>
     ea8:	21 c0       	rjmp	.+66     	; 0xeec <vfprintf+0x15c>
     eaa:	f8 01       	movw	r30, r16
     eac:	80 81       	ld	r24, Z
     eae:	89 83       	std	Y+1, r24	; 0x01
     eb0:	0e 5f       	subi	r16, 0xFE	; 254
     eb2:	1f 4f       	sbci	r17, 0xFF	; 255
     eb4:	88 24       	eor	r8, r8
     eb6:	83 94       	inc	r8
     eb8:	91 2c       	mov	r9, r1
     eba:	53 01       	movw	r10, r6
     ebc:	13 c0       	rjmp	.+38     	; 0xee4 <vfprintf+0x154>
     ebe:	28 01       	movw	r4, r16
     ec0:	f2 e0       	ldi	r31, 0x02	; 2
     ec2:	4f 0e       	add	r4, r31
     ec4:	51 1c       	adc	r5, r1
     ec6:	f8 01       	movw	r30, r16
     ec8:	a0 80       	ld	r10, Z
     eca:	b1 80       	ldd	r11, Z+1	; 0x01
     ecc:	36 fe       	sbrs	r3, 6
     ece:	03 c0       	rjmp	.+6      	; 0xed6 <vfprintf+0x146>
     ed0:	69 2d       	mov	r22, r9
     ed2:	70 e0       	ldi	r23, 0x00	; 0
     ed4:	02 c0       	rjmp	.+4      	; 0xeda <vfprintf+0x14a>
     ed6:	6f ef       	ldi	r22, 0xFF	; 255
     ed8:	7f ef       	ldi	r23, 0xFF	; 255
     eda:	c5 01       	movw	r24, r10
     edc:	0e 94 b4 08 	call	0x1168	; 0x1168 <strnlen>
     ee0:	4c 01       	movw	r8, r24
     ee2:	82 01       	movw	r16, r4
     ee4:	f3 2d       	mov	r31, r3
     ee6:	ff 77       	andi	r31, 0x7F	; 127
     ee8:	3f 2e       	mov	r3, r31
     eea:	16 c0       	rjmp	.+44     	; 0xf18 <vfprintf+0x188>
     eec:	28 01       	movw	r4, r16
     eee:	22 e0       	ldi	r18, 0x02	; 2
     ef0:	42 0e       	add	r4, r18
     ef2:	51 1c       	adc	r5, r1
     ef4:	f8 01       	movw	r30, r16
     ef6:	a0 80       	ld	r10, Z
     ef8:	b1 80       	ldd	r11, Z+1	; 0x01
     efa:	36 fe       	sbrs	r3, 6
     efc:	03 c0       	rjmp	.+6      	; 0xf04 <vfprintf+0x174>
     efe:	69 2d       	mov	r22, r9
     f00:	70 e0       	ldi	r23, 0x00	; 0
     f02:	02 c0       	rjmp	.+4      	; 0xf08 <vfprintf+0x178>
     f04:	6f ef       	ldi	r22, 0xFF	; 255
     f06:	7f ef       	ldi	r23, 0xFF	; 255
     f08:	c5 01       	movw	r24, r10
     f0a:	0e 94 a9 08 	call	0x1152	; 0x1152 <strnlen_P>
     f0e:	4c 01       	movw	r8, r24
     f10:	f3 2d       	mov	r31, r3
     f12:	f0 68       	ori	r31, 0x80	; 128
     f14:	3f 2e       	mov	r3, r31
     f16:	82 01       	movw	r16, r4
     f18:	33 fc       	sbrc	r3, 3
     f1a:	1b c0       	rjmp	.+54     	; 0xf52 <vfprintf+0x1c2>
     f1c:	82 2d       	mov	r24, r2
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	88 16       	cp	r8, r24
     f22:	99 06       	cpc	r9, r25
     f24:	b0 f4       	brcc	.+44     	; 0xf52 <vfprintf+0x1c2>
     f26:	b6 01       	movw	r22, r12
     f28:	80 e2       	ldi	r24, 0x20	; 32
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	0e 94 cf 08 	call	0x119e	; 0x119e <fputc>
     f30:	2a 94       	dec	r2
     f32:	f4 cf       	rjmp	.-24     	; 0xf1c <vfprintf+0x18c>
     f34:	f5 01       	movw	r30, r10
     f36:	37 fc       	sbrc	r3, 7
     f38:	85 91       	lpm	r24, Z+
     f3a:	37 fe       	sbrs	r3, 7
     f3c:	81 91       	ld	r24, Z+
     f3e:	5f 01       	movw	r10, r30
     f40:	b6 01       	movw	r22, r12
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	0e 94 cf 08 	call	0x119e	; 0x119e <fputc>
     f48:	21 10       	cpse	r2, r1
     f4a:	2a 94       	dec	r2
     f4c:	21 e0       	ldi	r18, 0x01	; 1
     f4e:	82 1a       	sub	r8, r18
     f50:	91 08       	sbc	r9, r1
     f52:	81 14       	cp	r8, r1
     f54:	91 04       	cpc	r9, r1
     f56:	71 f7       	brne	.-36     	; 0xf34 <vfprintf+0x1a4>
     f58:	e8 c0       	rjmp	.+464    	; 0x112a <vfprintf+0x39a>
     f5a:	84 36       	cpi	r24, 0x64	; 100
     f5c:	11 f0       	breq	.+4      	; 0xf62 <vfprintf+0x1d2>
     f5e:	89 36       	cpi	r24, 0x69	; 105
     f60:	41 f5       	brne	.+80     	; 0xfb2 <vfprintf+0x222>
     f62:	f8 01       	movw	r30, r16
     f64:	37 fe       	sbrs	r3, 7
     f66:	07 c0       	rjmp	.+14     	; 0xf76 <vfprintf+0x1e6>
     f68:	60 81       	ld	r22, Z
     f6a:	71 81       	ldd	r23, Z+1	; 0x01
     f6c:	82 81       	ldd	r24, Z+2	; 0x02
     f6e:	93 81       	ldd	r25, Z+3	; 0x03
     f70:	0c 5f       	subi	r16, 0xFC	; 252
     f72:	1f 4f       	sbci	r17, 0xFF	; 255
     f74:	08 c0       	rjmp	.+16     	; 0xf86 <vfprintf+0x1f6>
     f76:	60 81       	ld	r22, Z
     f78:	71 81       	ldd	r23, Z+1	; 0x01
     f7a:	07 2e       	mov	r0, r23
     f7c:	00 0c       	add	r0, r0
     f7e:	88 0b       	sbc	r24, r24
     f80:	99 0b       	sbc	r25, r25
     f82:	0e 5f       	subi	r16, 0xFE	; 254
     f84:	1f 4f       	sbci	r17, 0xFF	; 255
     f86:	f3 2d       	mov	r31, r3
     f88:	ff 76       	andi	r31, 0x6F	; 111
     f8a:	3f 2e       	mov	r3, r31
     f8c:	97 ff       	sbrs	r25, 7
     f8e:	09 c0       	rjmp	.+18     	; 0xfa2 <vfprintf+0x212>
     f90:	90 95       	com	r25
     f92:	80 95       	com	r24
     f94:	70 95       	com	r23
     f96:	61 95       	neg	r22
     f98:	7f 4f       	sbci	r23, 0xFF	; 255
     f9a:	8f 4f       	sbci	r24, 0xFF	; 255
     f9c:	9f 4f       	sbci	r25, 0xFF	; 255
     f9e:	f0 68       	ori	r31, 0x80	; 128
     fa0:	3f 2e       	mov	r3, r31
     fa2:	2a e0       	ldi	r18, 0x0A	; 10
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	a3 01       	movw	r20, r6
     fa8:	0e 94 0b 09 	call	0x1216	; 0x1216 <__ultoa_invert>
     fac:	88 2e       	mov	r8, r24
     fae:	86 18       	sub	r8, r6
     fb0:	45 c0       	rjmp	.+138    	; 0x103c <vfprintf+0x2ac>
     fb2:	85 37       	cpi	r24, 0x75	; 117
     fb4:	31 f4       	brne	.+12     	; 0xfc2 <vfprintf+0x232>
     fb6:	23 2d       	mov	r18, r3
     fb8:	2f 7e       	andi	r18, 0xEF	; 239
     fba:	b2 2e       	mov	r11, r18
     fbc:	2a e0       	ldi	r18, 0x0A	; 10
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	25 c0       	rjmp	.+74     	; 0x100c <vfprintf+0x27c>
     fc2:	93 2d       	mov	r25, r3
     fc4:	99 7f       	andi	r25, 0xF9	; 249
     fc6:	b9 2e       	mov	r11, r25
     fc8:	8f 36       	cpi	r24, 0x6F	; 111
     fca:	c1 f0       	breq	.+48     	; 0xffc <vfprintf+0x26c>
     fcc:	18 f4       	brcc	.+6      	; 0xfd4 <vfprintf+0x244>
     fce:	88 35       	cpi	r24, 0x58	; 88
     fd0:	79 f0       	breq	.+30     	; 0xff0 <vfprintf+0x260>
     fd2:	b5 c0       	rjmp	.+362    	; 0x113e <vfprintf+0x3ae>
     fd4:	80 37       	cpi	r24, 0x70	; 112
     fd6:	19 f0       	breq	.+6      	; 0xfde <vfprintf+0x24e>
     fd8:	88 37       	cpi	r24, 0x78	; 120
     fda:	21 f0       	breq	.+8      	; 0xfe4 <vfprintf+0x254>
     fdc:	b0 c0       	rjmp	.+352    	; 0x113e <vfprintf+0x3ae>
     fde:	e9 2f       	mov	r30, r25
     fe0:	e0 61       	ori	r30, 0x10	; 16
     fe2:	be 2e       	mov	r11, r30
     fe4:	b4 fe       	sbrs	r11, 4
     fe6:	0d c0       	rjmp	.+26     	; 0x1002 <vfprintf+0x272>
     fe8:	fb 2d       	mov	r31, r11
     fea:	f4 60       	ori	r31, 0x04	; 4
     fec:	bf 2e       	mov	r11, r31
     fee:	09 c0       	rjmp	.+18     	; 0x1002 <vfprintf+0x272>
     ff0:	34 fe       	sbrs	r3, 4
     ff2:	0a c0       	rjmp	.+20     	; 0x1008 <vfprintf+0x278>
     ff4:	29 2f       	mov	r18, r25
     ff6:	26 60       	ori	r18, 0x06	; 6
     ff8:	b2 2e       	mov	r11, r18
     ffa:	06 c0       	rjmp	.+12     	; 0x1008 <vfprintf+0x278>
     ffc:	28 e0       	ldi	r18, 0x08	; 8
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	05 c0       	rjmp	.+10     	; 0x100c <vfprintf+0x27c>
    1002:	20 e1       	ldi	r18, 0x10	; 16
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	02 c0       	rjmp	.+4      	; 0x100c <vfprintf+0x27c>
    1008:	20 e1       	ldi	r18, 0x10	; 16
    100a:	32 e0       	ldi	r19, 0x02	; 2
    100c:	f8 01       	movw	r30, r16
    100e:	b7 fe       	sbrs	r11, 7
    1010:	07 c0       	rjmp	.+14     	; 0x1020 <vfprintf+0x290>
    1012:	60 81       	ld	r22, Z
    1014:	71 81       	ldd	r23, Z+1	; 0x01
    1016:	82 81       	ldd	r24, Z+2	; 0x02
    1018:	93 81       	ldd	r25, Z+3	; 0x03
    101a:	0c 5f       	subi	r16, 0xFC	; 252
    101c:	1f 4f       	sbci	r17, 0xFF	; 255
    101e:	06 c0       	rjmp	.+12     	; 0x102c <vfprintf+0x29c>
    1020:	60 81       	ld	r22, Z
    1022:	71 81       	ldd	r23, Z+1	; 0x01
    1024:	80 e0       	ldi	r24, 0x00	; 0
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	0e 5f       	subi	r16, 0xFE	; 254
    102a:	1f 4f       	sbci	r17, 0xFF	; 255
    102c:	a3 01       	movw	r20, r6
    102e:	0e 94 0b 09 	call	0x1216	; 0x1216 <__ultoa_invert>
    1032:	88 2e       	mov	r8, r24
    1034:	86 18       	sub	r8, r6
    1036:	fb 2d       	mov	r31, r11
    1038:	ff 77       	andi	r31, 0x7F	; 127
    103a:	3f 2e       	mov	r3, r31
    103c:	36 fe       	sbrs	r3, 6
    103e:	0d c0       	rjmp	.+26     	; 0x105a <vfprintf+0x2ca>
    1040:	23 2d       	mov	r18, r3
    1042:	2e 7f       	andi	r18, 0xFE	; 254
    1044:	a2 2e       	mov	r10, r18
    1046:	89 14       	cp	r8, r9
    1048:	58 f4       	brcc	.+22     	; 0x1060 <vfprintf+0x2d0>
    104a:	34 fe       	sbrs	r3, 4
    104c:	0b c0       	rjmp	.+22     	; 0x1064 <vfprintf+0x2d4>
    104e:	32 fc       	sbrc	r3, 2
    1050:	09 c0       	rjmp	.+18     	; 0x1064 <vfprintf+0x2d4>
    1052:	83 2d       	mov	r24, r3
    1054:	8e 7e       	andi	r24, 0xEE	; 238
    1056:	a8 2e       	mov	r10, r24
    1058:	05 c0       	rjmp	.+10     	; 0x1064 <vfprintf+0x2d4>
    105a:	b8 2c       	mov	r11, r8
    105c:	a3 2c       	mov	r10, r3
    105e:	03 c0       	rjmp	.+6      	; 0x1066 <vfprintf+0x2d6>
    1060:	b8 2c       	mov	r11, r8
    1062:	01 c0       	rjmp	.+2      	; 0x1066 <vfprintf+0x2d6>
    1064:	b9 2c       	mov	r11, r9
    1066:	a4 fe       	sbrs	r10, 4
    1068:	0f c0       	rjmp	.+30     	; 0x1088 <vfprintf+0x2f8>
    106a:	fe 01       	movw	r30, r28
    106c:	e8 0d       	add	r30, r8
    106e:	f1 1d       	adc	r31, r1
    1070:	80 81       	ld	r24, Z
    1072:	80 33       	cpi	r24, 0x30	; 48
    1074:	21 f4       	brne	.+8      	; 0x107e <vfprintf+0x2ee>
    1076:	9a 2d       	mov	r25, r10
    1078:	99 7e       	andi	r25, 0xE9	; 233
    107a:	a9 2e       	mov	r10, r25
    107c:	09 c0       	rjmp	.+18     	; 0x1090 <vfprintf+0x300>
    107e:	a2 fe       	sbrs	r10, 2
    1080:	06 c0       	rjmp	.+12     	; 0x108e <vfprintf+0x2fe>
    1082:	b3 94       	inc	r11
    1084:	b3 94       	inc	r11
    1086:	04 c0       	rjmp	.+8      	; 0x1090 <vfprintf+0x300>
    1088:	8a 2d       	mov	r24, r10
    108a:	86 78       	andi	r24, 0x86	; 134
    108c:	09 f0       	breq	.+2      	; 0x1090 <vfprintf+0x300>
    108e:	b3 94       	inc	r11
    1090:	a3 fc       	sbrc	r10, 3
    1092:	11 c0       	rjmp	.+34     	; 0x10b6 <vfprintf+0x326>
    1094:	a0 fe       	sbrs	r10, 0
    1096:	06 c0       	rjmp	.+12     	; 0x10a4 <vfprintf+0x314>
    1098:	b2 14       	cp	r11, r2
    109a:	88 f4       	brcc	.+34     	; 0x10be <vfprintf+0x32e>
    109c:	28 0c       	add	r2, r8
    109e:	92 2c       	mov	r9, r2
    10a0:	9b 18       	sub	r9, r11
    10a2:	0e c0       	rjmp	.+28     	; 0x10c0 <vfprintf+0x330>
    10a4:	b2 14       	cp	r11, r2
    10a6:	60 f4       	brcc	.+24     	; 0x10c0 <vfprintf+0x330>
    10a8:	b6 01       	movw	r22, r12
    10aa:	80 e2       	ldi	r24, 0x20	; 32
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	0e 94 cf 08 	call	0x119e	; 0x119e <fputc>
    10b2:	b3 94       	inc	r11
    10b4:	f7 cf       	rjmp	.-18     	; 0x10a4 <vfprintf+0x314>
    10b6:	b2 14       	cp	r11, r2
    10b8:	18 f4       	brcc	.+6      	; 0x10c0 <vfprintf+0x330>
    10ba:	2b 18       	sub	r2, r11
    10bc:	02 c0       	rjmp	.+4      	; 0x10c2 <vfprintf+0x332>
    10be:	98 2c       	mov	r9, r8
    10c0:	21 2c       	mov	r2, r1
    10c2:	a4 fe       	sbrs	r10, 4
    10c4:	10 c0       	rjmp	.+32     	; 0x10e6 <vfprintf+0x356>
    10c6:	b6 01       	movw	r22, r12
    10c8:	80 e3       	ldi	r24, 0x30	; 48
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	0e 94 cf 08 	call	0x119e	; 0x119e <fputc>
    10d0:	a2 fe       	sbrs	r10, 2
    10d2:	17 c0       	rjmp	.+46     	; 0x1102 <vfprintf+0x372>
    10d4:	a1 fc       	sbrc	r10, 1
    10d6:	03 c0       	rjmp	.+6      	; 0x10de <vfprintf+0x34e>
    10d8:	88 e7       	ldi	r24, 0x78	; 120
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	02 c0       	rjmp	.+4      	; 0x10e2 <vfprintf+0x352>
    10de:	88 e5       	ldi	r24, 0x58	; 88
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	b6 01       	movw	r22, r12
    10e4:	0c c0       	rjmp	.+24     	; 0x10fe <vfprintf+0x36e>
    10e6:	8a 2d       	mov	r24, r10
    10e8:	86 78       	andi	r24, 0x86	; 134
    10ea:	59 f0       	breq	.+22     	; 0x1102 <vfprintf+0x372>
    10ec:	a1 fe       	sbrs	r10, 1
    10ee:	02 c0       	rjmp	.+4      	; 0x10f4 <vfprintf+0x364>
    10f0:	8b e2       	ldi	r24, 0x2B	; 43
    10f2:	01 c0       	rjmp	.+2      	; 0x10f6 <vfprintf+0x366>
    10f4:	80 e2       	ldi	r24, 0x20	; 32
    10f6:	a7 fc       	sbrc	r10, 7
    10f8:	8d e2       	ldi	r24, 0x2D	; 45
    10fa:	b6 01       	movw	r22, r12
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	0e 94 cf 08 	call	0x119e	; 0x119e <fputc>
    1102:	89 14       	cp	r8, r9
    1104:	38 f4       	brcc	.+14     	; 0x1114 <vfprintf+0x384>
    1106:	b6 01       	movw	r22, r12
    1108:	80 e3       	ldi	r24, 0x30	; 48
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	0e 94 cf 08 	call	0x119e	; 0x119e <fputc>
    1110:	9a 94       	dec	r9
    1112:	f7 cf       	rjmp	.-18     	; 0x1102 <vfprintf+0x372>
    1114:	8a 94       	dec	r8
    1116:	f3 01       	movw	r30, r6
    1118:	e8 0d       	add	r30, r8
    111a:	f1 1d       	adc	r31, r1
    111c:	80 81       	ld	r24, Z
    111e:	b6 01       	movw	r22, r12
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	0e 94 cf 08 	call	0x119e	; 0x119e <fputc>
    1126:	81 10       	cpse	r8, r1
    1128:	f5 cf       	rjmp	.-22     	; 0x1114 <vfprintf+0x384>
    112a:	22 20       	and	r2, r2
    112c:	09 f4       	brne	.+2      	; 0x1130 <vfprintf+0x3a0>
    112e:	42 ce       	rjmp	.-892    	; 0xdb4 <vfprintf+0x24>
    1130:	b6 01       	movw	r22, r12
    1132:	80 e2       	ldi	r24, 0x20	; 32
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	0e 94 cf 08 	call	0x119e	; 0x119e <fputc>
    113a:	2a 94       	dec	r2
    113c:	f6 cf       	rjmp	.-20     	; 0x112a <vfprintf+0x39a>
    113e:	f6 01       	movw	r30, r12
    1140:	86 81       	ldd	r24, Z+6	; 0x06
    1142:	97 81       	ldd	r25, Z+7	; 0x07
    1144:	02 c0       	rjmp	.+4      	; 0x114a <vfprintf+0x3ba>
    1146:	8f ef       	ldi	r24, 0xFF	; 255
    1148:	9f ef       	ldi	r25, 0xFF	; 255
    114a:	2b 96       	adiw	r28, 0x0b	; 11
    114c:	e2 e1       	ldi	r30, 0x12	; 18
    114e:	0c 94 85 09 	jmp	0x130a	; 0x130a <__epilogue_restores__>

00001152 <strnlen_P>:
    1152:	fc 01       	movw	r30, r24
    1154:	05 90       	lpm	r0, Z+
    1156:	61 50       	subi	r22, 0x01	; 1
    1158:	70 40       	sbci	r23, 0x00	; 0
    115a:	01 10       	cpse	r0, r1
    115c:	d8 f7       	brcc	.-10     	; 0x1154 <strnlen_P+0x2>
    115e:	80 95       	com	r24
    1160:	90 95       	com	r25
    1162:	8e 0f       	add	r24, r30
    1164:	9f 1f       	adc	r25, r31
    1166:	08 95       	ret

00001168 <strnlen>:
    1168:	fc 01       	movw	r30, r24
    116a:	61 50       	subi	r22, 0x01	; 1
    116c:	70 40       	sbci	r23, 0x00	; 0
    116e:	01 90       	ld	r0, Z+
    1170:	01 10       	cpse	r0, r1
    1172:	d8 f7       	brcc	.-10     	; 0x116a <strnlen+0x2>
    1174:	80 95       	com	r24
    1176:	90 95       	com	r25
    1178:	8e 0f       	add	r24, r30
    117a:	9f 1f       	adc	r25, r31
    117c:	08 95       	ret

0000117e <strrev>:
    117e:	dc 01       	movw	r26, r24
    1180:	fc 01       	movw	r30, r24
    1182:	67 2f       	mov	r22, r23
    1184:	71 91       	ld	r23, Z+
    1186:	77 23       	and	r23, r23
    1188:	e1 f7       	brne	.-8      	; 0x1182 <strrev+0x4>
    118a:	32 97       	sbiw	r30, 0x02	; 2
    118c:	04 c0       	rjmp	.+8      	; 0x1196 <strrev+0x18>
    118e:	7c 91       	ld	r23, X
    1190:	6d 93       	st	X+, r22
    1192:	70 83       	st	Z, r23
    1194:	62 91       	ld	r22, -Z
    1196:	ae 17       	cp	r26, r30
    1198:	bf 07       	cpc	r27, r31
    119a:	c8 f3       	brcs	.-14     	; 0x118e <strrev+0x10>
    119c:	08 95       	ret

0000119e <fputc>:
    119e:	0f 93       	push	r16
    11a0:	1f 93       	push	r17
    11a2:	cf 93       	push	r28
    11a4:	df 93       	push	r29
    11a6:	fb 01       	movw	r30, r22
    11a8:	23 81       	ldd	r18, Z+3	; 0x03
    11aa:	21 fd       	sbrc	r18, 1
    11ac:	03 c0       	rjmp	.+6      	; 0x11b4 <fputc+0x16>
    11ae:	8f ef       	ldi	r24, 0xFF	; 255
    11b0:	9f ef       	ldi	r25, 0xFF	; 255
    11b2:	2c c0       	rjmp	.+88     	; 0x120c <fputc+0x6e>
    11b4:	22 ff       	sbrs	r18, 2
    11b6:	16 c0       	rjmp	.+44     	; 0x11e4 <fputc+0x46>
    11b8:	46 81       	ldd	r20, Z+6	; 0x06
    11ba:	57 81       	ldd	r21, Z+7	; 0x07
    11bc:	24 81       	ldd	r18, Z+4	; 0x04
    11be:	35 81       	ldd	r19, Z+5	; 0x05
    11c0:	42 17       	cp	r20, r18
    11c2:	53 07       	cpc	r21, r19
    11c4:	44 f4       	brge	.+16     	; 0x11d6 <fputc+0x38>
    11c6:	a0 81       	ld	r26, Z
    11c8:	b1 81       	ldd	r27, Z+1	; 0x01
    11ca:	9d 01       	movw	r18, r26
    11cc:	2f 5f       	subi	r18, 0xFF	; 255
    11ce:	3f 4f       	sbci	r19, 0xFF	; 255
    11d0:	31 83       	std	Z+1, r19	; 0x01
    11d2:	20 83       	st	Z, r18
    11d4:	8c 93       	st	X, r24
    11d6:	26 81       	ldd	r18, Z+6	; 0x06
    11d8:	37 81       	ldd	r19, Z+7	; 0x07
    11da:	2f 5f       	subi	r18, 0xFF	; 255
    11dc:	3f 4f       	sbci	r19, 0xFF	; 255
    11de:	37 83       	std	Z+7, r19	; 0x07
    11e0:	26 83       	std	Z+6, r18	; 0x06
    11e2:	14 c0       	rjmp	.+40     	; 0x120c <fputc+0x6e>
    11e4:	8b 01       	movw	r16, r22
    11e6:	ec 01       	movw	r28, r24
    11e8:	fb 01       	movw	r30, r22
    11ea:	00 84       	ldd	r0, Z+8	; 0x08
    11ec:	f1 85       	ldd	r31, Z+9	; 0x09
    11ee:	e0 2d       	mov	r30, r0
    11f0:	09 95       	icall
    11f2:	89 2b       	or	r24, r25
    11f4:	e1 f6       	brne	.-72     	; 0x11ae <fputc+0x10>
    11f6:	d8 01       	movw	r26, r16
    11f8:	16 96       	adiw	r26, 0x06	; 6
    11fa:	8d 91       	ld	r24, X+
    11fc:	9c 91       	ld	r25, X
    11fe:	17 97       	sbiw	r26, 0x07	; 7
    1200:	01 96       	adiw	r24, 0x01	; 1
    1202:	17 96       	adiw	r26, 0x07	; 7
    1204:	9c 93       	st	X, r25
    1206:	8e 93       	st	-X, r24
    1208:	16 97       	sbiw	r26, 0x06	; 6
    120a:	ce 01       	movw	r24, r28
    120c:	df 91       	pop	r29
    120e:	cf 91       	pop	r28
    1210:	1f 91       	pop	r17
    1212:	0f 91       	pop	r16
    1214:	08 95       	ret

00001216 <__ultoa_invert>:
    1216:	fa 01       	movw	r30, r20
    1218:	aa 27       	eor	r26, r26
    121a:	28 30       	cpi	r18, 0x08	; 8
    121c:	51 f1       	breq	.+84     	; 0x1272 <__ultoa_invert+0x5c>
    121e:	20 31       	cpi	r18, 0x10	; 16
    1220:	81 f1       	breq	.+96     	; 0x1282 <__ultoa_invert+0x6c>
    1222:	e8 94       	clt
    1224:	6f 93       	push	r22
    1226:	6e 7f       	andi	r22, 0xFE	; 254
    1228:	6e 5f       	subi	r22, 0xFE	; 254
    122a:	7f 4f       	sbci	r23, 0xFF	; 255
    122c:	8f 4f       	sbci	r24, 0xFF	; 255
    122e:	9f 4f       	sbci	r25, 0xFF	; 255
    1230:	af 4f       	sbci	r26, 0xFF	; 255
    1232:	b1 e0       	ldi	r27, 0x01	; 1
    1234:	3e d0       	rcall	.+124    	; 0x12b2 <__ultoa_invert+0x9c>
    1236:	b4 e0       	ldi	r27, 0x04	; 4
    1238:	3c d0       	rcall	.+120    	; 0x12b2 <__ultoa_invert+0x9c>
    123a:	67 0f       	add	r22, r23
    123c:	78 1f       	adc	r23, r24
    123e:	89 1f       	adc	r24, r25
    1240:	9a 1f       	adc	r25, r26
    1242:	a1 1d       	adc	r26, r1
    1244:	68 0f       	add	r22, r24
    1246:	79 1f       	adc	r23, r25
    1248:	8a 1f       	adc	r24, r26
    124a:	91 1d       	adc	r25, r1
    124c:	a1 1d       	adc	r26, r1
    124e:	6a 0f       	add	r22, r26
    1250:	71 1d       	adc	r23, r1
    1252:	81 1d       	adc	r24, r1
    1254:	91 1d       	adc	r25, r1
    1256:	a1 1d       	adc	r26, r1
    1258:	20 d0       	rcall	.+64     	; 0x129a <__ultoa_invert+0x84>
    125a:	09 f4       	brne	.+2      	; 0x125e <__ultoa_invert+0x48>
    125c:	68 94       	set
    125e:	3f 91       	pop	r19
    1260:	2a e0       	ldi	r18, 0x0A	; 10
    1262:	26 9f       	mul	r18, r22
    1264:	11 24       	eor	r1, r1
    1266:	30 19       	sub	r19, r0
    1268:	30 5d       	subi	r19, 0xD0	; 208
    126a:	31 93       	st	Z+, r19
    126c:	de f6       	brtc	.-74     	; 0x1224 <__ultoa_invert+0xe>
    126e:	cf 01       	movw	r24, r30
    1270:	08 95       	ret
    1272:	46 2f       	mov	r20, r22
    1274:	47 70       	andi	r20, 0x07	; 7
    1276:	40 5d       	subi	r20, 0xD0	; 208
    1278:	41 93       	st	Z+, r20
    127a:	b3 e0       	ldi	r27, 0x03	; 3
    127c:	0f d0       	rcall	.+30     	; 0x129c <__ultoa_invert+0x86>
    127e:	c9 f7       	brne	.-14     	; 0x1272 <__ultoa_invert+0x5c>
    1280:	f6 cf       	rjmp	.-20     	; 0x126e <__ultoa_invert+0x58>
    1282:	46 2f       	mov	r20, r22
    1284:	4f 70       	andi	r20, 0x0F	; 15
    1286:	40 5d       	subi	r20, 0xD0	; 208
    1288:	4a 33       	cpi	r20, 0x3A	; 58
    128a:	18 f0       	brcs	.+6      	; 0x1292 <__ultoa_invert+0x7c>
    128c:	49 5d       	subi	r20, 0xD9	; 217
    128e:	31 fd       	sbrc	r19, 1
    1290:	40 52       	subi	r20, 0x20	; 32
    1292:	41 93       	st	Z+, r20
    1294:	02 d0       	rcall	.+4      	; 0x129a <__ultoa_invert+0x84>
    1296:	a9 f7       	brne	.-22     	; 0x1282 <__ultoa_invert+0x6c>
    1298:	ea cf       	rjmp	.-44     	; 0x126e <__ultoa_invert+0x58>
    129a:	b4 e0       	ldi	r27, 0x04	; 4
    129c:	a6 95       	lsr	r26
    129e:	97 95       	ror	r25
    12a0:	87 95       	ror	r24
    12a2:	77 95       	ror	r23
    12a4:	67 95       	ror	r22
    12a6:	ba 95       	dec	r27
    12a8:	c9 f7       	brne	.-14     	; 0x129c <__ultoa_invert+0x86>
    12aa:	00 97       	sbiw	r24, 0x00	; 0
    12ac:	61 05       	cpc	r22, r1
    12ae:	71 05       	cpc	r23, r1
    12b0:	08 95       	ret
    12b2:	9b 01       	movw	r18, r22
    12b4:	ac 01       	movw	r20, r24
    12b6:	0a 2e       	mov	r0, r26
    12b8:	06 94       	lsr	r0
    12ba:	57 95       	ror	r21
    12bc:	47 95       	ror	r20
    12be:	37 95       	ror	r19
    12c0:	27 95       	ror	r18
    12c2:	ba 95       	dec	r27
    12c4:	c9 f7       	brne	.-14     	; 0x12b8 <__ultoa_invert+0xa2>
    12c6:	62 0f       	add	r22, r18
    12c8:	73 1f       	adc	r23, r19
    12ca:	84 1f       	adc	r24, r20
    12cc:	95 1f       	adc	r25, r21
    12ce:	a0 1d       	adc	r26, r0
    12d0:	08 95       	ret

000012d2 <__prologue_saves__>:
    12d2:	2f 92       	push	r2
    12d4:	3f 92       	push	r3
    12d6:	4f 92       	push	r4
    12d8:	5f 92       	push	r5
    12da:	6f 92       	push	r6
    12dc:	7f 92       	push	r7
    12de:	8f 92       	push	r8
    12e0:	9f 92       	push	r9
    12e2:	af 92       	push	r10
    12e4:	bf 92       	push	r11
    12e6:	cf 92       	push	r12
    12e8:	df 92       	push	r13
    12ea:	ef 92       	push	r14
    12ec:	ff 92       	push	r15
    12ee:	0f 93       	push	r16
    12f0:	1f 93       	push	r17
    12f2:	cf 93       	push	r28
    12f4:	df 93       	push	r29
    12f6:	cd b7       	in	r28, 0x3d	; 61
    12f8:	de b7       	in	r29, 0x3e	; 62
    12fa:	ca 1b       	sub	r28, r26
    12fc:	db 0b       	sbc	r29, r27
    12fe:	0f b6       	in	r0, 0x3f	; 63
    1300:	f8 94       	cli
    1302:	de bf       	out	0x3e, r29	; 62
    1304:	0f be       	out	0x3f, r0	; 63
    1306:	cd bf       	out	0x3d, r28	; 61
    1308:	09 94       	ijmp

0000130a <__epilogue_restores__>:
    130a:	2a 88       	ldd	r2, Y+18	; 0x12
    130c:	39 88       	ldd	r3, Y+17	; 0x11
    130e:	48 88       	ldd	r4, Y+16	; 0x10
    1310:	5f 84       	ldd	r5, Y+15	; 0x0f
    1312:	6e 84       	ldd	r6, Y+14	; 0x0e
    1314:	7d 84       	ldd	r7, Y+13	; 0x0d
    1316:	8c 84       	ldd	r8, Y+12	; 0x0c
    1318:	9b 84       	ldd	r9, Y+11	; 0x0b
    131a:	aa 84       	ldd	r10, Y+10	; 0x0a
    131c:	b9 84       	ldd	r11, Y+9	; 0x09
    131e:	c8 84       	ldd	r12, Y+8	; 0x08
    1320:	df 80       	ldd	r13, Y+7	; 0x07
    1322:	ee 80       	ldd	r14, Y+6	; 0x06
    1324:	fd 80       	ldd	r15, Y+5	; 0x05
    1326:	0c 81       	ldd	r16, Y+4	; 0x04
    1328:	1b 81       	ldd	r17, Y+3	; 0x03
    132a:	aa 81       	ldd	r26, Y+2	; 0x02
    132c:	b9 81       	ldd	r27, Y+1	; 0x01
    132e:	ce 0f       	add	r28, r30
    1330:	d1 1d       	adc	r29, r1
    1332:	0f b6       	in	r0, 0x3f	; 63
    1334:	f8 94       	cli
    1336:	de bf       	out	0x3e, r29	; 62
    1338:	0f be       	out	0x3f, r0	; 63
    133a:	cd bf       	out	0x3d, r28	; 61
    133c:	ed 01       	movw	r28, r26
    133e:	08 95       	ret

00001340 <_exit>:
    1340:	f8 94       	cli

00001342 <__stop_program>:
    1342:	ff cf       	rjmp	.-2      	; 0x1342 <__stop_program>
