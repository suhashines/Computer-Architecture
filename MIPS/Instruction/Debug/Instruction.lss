
Instruction.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000202  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000048  00800060  00000202  00000296  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  008000a8  008000a8  000002de  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000310  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000876  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000693  00000000  00000000  00000c1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003de  00000000  00000000  000012ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  0000168c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d0  00000000  00000000  00001730  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001d0  00000000  00000000  00001b00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001cd0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e0       	ldi	r30, 0x02	; 2
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 3a       	cpi	r26, 0xA8	; 168
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 ea       	ldi	r26, 0xA8	; 168
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 3a       	cpi	r26, 0xA9	; 169
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <main>
  8a:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <UART_init>:
}




void terminate(){
  92:	1b b8       	out	0x0b, r1	; 11
  94:	88 e1       	ldi	r24, 0x18	; 24
  96:	8a b9       	out	0x0a, r24	; 10
  98:	86 e8       	ldi	r24, 0x86	; 134
  9a:	80 bd       	out	0x20, r24	; 32
  9c:	83 e3       	ldi	r24, 0x33	; 51
  9e:	89 b9       	out	0x09, r24	; 9
  a0:	10 bc       	out	0x20, r1	; 32
  a2:	08 95       	ret

000000a4 <UART_send>:
  a4:	5d 9b       	sbis	0x0b, 5	; 11
  a6:	fe cf       	rjmp	.-4      	; 0xa4 <UART_send>
  a8:	8c b9       	out	0x0c, r24	; 12
  aa:	08 95       	ret

000000ac <UART_receive>:
  ac:	5f 9b       	sbis	0x0b, 7	; 11
  ae:	fe cf       	rjmp	.-4      	; 0xac <UART_receive>
  b0:	8c b1       	in	r24, 0x0c	; 12
  b2:	08 95       	ret

000000b4 <handleJump>:
  b4:	29 b3       	in	r18, 0x19	; 25
  b6:	28 71       	andi	r18, 0x18	; 24
  b8:	30 e0       	ldi	r19, 0x00	; 0
  ba:	35 95       	asr	r19
  bc:	27 95       	ror	r18
  be:	35 95       	asr	r19
  c0:	27 95       	ror	r18
  c2:	35 95       	asr	r19
  c4:	27 95       	ror	r18
  c6:	23 30       	cpi	r18, 0x03	; 3
  c8:	31 05       	cpc	r19, r1
  ca:	31 f4       	brne	.+12     	; 0xd8 <handleJump+0x24>
  cc:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <__data_end>
  d0:	8f 5f       	subi	r24, 0xFF	; 255
  d2:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__data_end>
  d6:	08 95       	ret
  d8:	22 30       	cpi	r18, 0x02	; 2
  da:	31 05       	cpc	r19, r1
  dc:	19 f4       	brne	.+6      	; 0xe4 <handleJump+0x30>
  de:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__data_end>
  e2:	08 95       	ret
  e4:	4f e5       	ldi	r20, 0x5F	; 95
  e6:	5a ee       	ldi	r21, 0xEA	; 234
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	41 50       	subi	r20, 0x01	; 1
  ec:	50 40       	sbci	r21, 0x00	; 0
  ee:	90 40       	sbci	r25, 0x00	; 0
  f0:	e1 f7       	brne	.-8      	; 0xea <handleJump+0x36>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <handleJump+0x40>
  f4:	00 00       	nop
  f6:	88 30       	cpi	r24, 0x08	; 8
  f8:	08 f0       	brcs	.+2      	; 0xfc <handleJump+0x48>
  fa:	80 6f       	ori	r24, 0xF0	; 240
  fc:	99 b3       	in	r25, 0x19	; 25
  fe:	90 72       	andi	r25, 0x20	; 32
 100:	21 15       	cp	r18, r1
 102:	31 05       	cpc	r19, r1
 104:	49 f4       	brne	.+18     	; 0x118 <handleJump+0x64>
 106:	99 23       	and	r25, r25
 108:	91 f0       	breq	.+36     	; 0x12e <handleJump+0x7a>
 10a:	90 91 a8 00 	lds	r25, 0x00A8	; 0x8000a8 <__data_end>
 10e:	9f 5f       	subi	r25, 0xFF	; 255
 110:	98 0f       	add	r25, r24
 112:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <__data_end>
 116:	0b c0       	rjmp	.+22     	; 0x12e <handleJump+0x7a>
 118:	21 30       	cpi	r18, 0x01	; 1
 11a:	31 05       	cpc	r19, r1
 11c:	41 f4       	brne	.+16     	; 0x12e <handleJump+0x7a>
 11e:	91 11       	cpse	r25, r1
 120:	06 c0       	rjmp	.+12     	; 0x12e <handleJump+0x7a>
 122:	90 91 a8 00 	lds	r25, 0x00A8	; 0x8000a8 <__data_end>
 126:	9f 5f       	subi	r25, 0xFF	; 255
 128:	98 0f       	add	r25, r24
 12a:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <__data_end>
 12e:	85 bb       	out	0x15, r24	; 21
 130:	08 95       	ret

00000132 <run_manual>:
	while(1);
}


void run_manual(){
 132:	cf 93       	push	r28
	
	if(PINA & (1<<PA2)){  
 134:	ca 9b       	sbis	0x19, 2	; 25
 136:	22 c0       	rjmp	.+68     	; 0x17c <run_manual+0x4a>
		
		 while(PINA & (1<<PA2)) ;      //manual mode button has been pressed
 138:	ca 99       	sbic	0x19, 2	; 25
 13a:	fe cf       	rjmp	.-4      	; 0x138 <run_manual+0x6>
		 
		 if(ip>=length) terminate();
 13c:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <__data_end>
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 146:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 14a:	82 17       	cp	r24, r18
 14c:	93 07       	cpc	r25, r19
 14e:	0c f0       	brlt	.+2      	; 0x152 <run_manual+0x20>
 150:	ff cf       	rjmp	.-2      	; 0x150 <run_manual+0x1e>
		
		 uint16_t instruction = arr[ip] ;
 152:	e0 91 a8 00 	lds	r30, 0x00A8	; 0x8000a8 <__data_end>
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	ee 0f       	add	r30, r30
 15a:	ff 1f       	adc	r31, r31
 15c:	ee 59       	subi	r30, 0x9E	; 158
 15e:	ff 4f       	sbci	r31, 0xFF	; 255
 160:	c1 81       	ldd	r28, Z+1	; 0x01
		unsigned char lower_byte = instruction & (0x00FF) ;
		unsigned char upper_byte = instruction >> 8 ;
		
		//now let's send the msg
		
		UART_send(lower_byte) ;
 162:	80 81       	ld	r24, Z
 164:	0e 94 52 00 	call	0xa4	; 0xa4 <UART_send>
		
		UART_send(upper_byte) ;
 168:	8c 2f       	mov	r24, r28
 16a:	0e 94 52 00 	call	0xa4	; 0xa4 <UART_send>
		
		//unsigned char cmd = UART_receive();
		
		unsigned char jump = UART_receive();
 16e:	0e 94 56 00 	call	0xac	; 0xac <UART_receive>
		
		handleJump(jump);
 172:	0e 94 5a 00 	call	0xb4	; 0xb4 <handleJump>
		
		PORTB = ip;
 176:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <__data_end>
 17a:	88 bb       	out	0x18, r24	; 24
		
		
	}
	
}
 17c:	cf 91       	pop	r28
 17e:	08 95       	ret

00000180 <run_autopilot>:

void run_autopilot(){
 180:	cf 93       	push	r28
	
     //running in autopilot mode
	 
	 if(ip>=length) terminate();
 182:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <__data_end>
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 18c:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 190:	82 17       	cp	r24, r18
 192:	93 07       	cpc	r25, r19
 194:	0c f0       	brlt	.+2      	; 0x198 <run_autopilot+0x18>
 196:	ff cf       	rjmp	.-2      	; 0x196 <run_autopilot+0x16>
	 
	 uint16_t instruction = arr[ip] ;
 198:	e0 91 a8 00 	lds	r30, 0x00A8	; 0x8000a8 <__data_end>
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	ee 0f       	add	r30, r30
 1a0:	ff 1f       	adc	r31, r31
 1a2:	ee 59       	subi	r30, 0x9E	; 158
 1a4:	ff 4f       	sbci	r31, 0xFF	; 255
 1a6:	c1 81       	ldd	r28, Z+1	; 0x01
	 unsigned char lower_byte = instruction & (0x00FF) ;
	 unsigned char upper_byte = instruction >> 8 ;
	 
	 //now let's send the msg
	 
	 UART_send(lower_byte) ;
 1a8:	80 81       	ld	r24, Z
 1aa:	0e 94 52 00 	call	0xa4	; 0xa4 <UART_send>
	 
	 UART_send(upper_byte) ;
 1ae:	8c 2f       	mov	r24, r28
 1b0:	0e 94 52 00 	call	0xa4	; 0xa4 <UART_send>
	 
	 //unsigned char cmd = UART_receive();
	 
	 unsigned char jump = UART_receive();
 1b4:	0e 94 56 00 	call	0xac	; 0xac <UART_receive>
	 
	 handleJump(jump);
 1b8:	0e 94 5a 00 	call	0xb4	; 0xb4 <handleJump>
	 
	 PORTB = ip;
 1bc:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <__data_end>
 1c0:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c2:	2f e3       	ldi	r18, 0x3F	; 63
 1c4:	8d e0       	ldi	r24, 0x0D	; 13
 1c6:	93 e0       	ldi	r25, 0x03	; 3
 1c8:	21 50       	subi	r18, 0x01	; 1
 1ca:	80 40       	sbci	r24, 0x00	; 0
 1cc:	90 40       	sbci	r25, 0x00	; 0
 1ce:	e1 f7       	brne	.-8      	; 0x1c8 <run_autopilot+0x48>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <run_autopilot+0x52>
 1d2:	00 00       	nop
	
	_delay_ms(1000);
	
}
 1d4:	cf 91       	pop	r28
 1d6:	08 95       	ret

000001d8 <main>:

int main(void)
{
    /* Replace with your application code */
	
	DDRA = 0b11000000 ; // configuring PA0 as start , PA1 as mode selector , PA2 manual mode button
 1d8:	80 ec       	ldi	r24, 0xC0	; 192
 1da:	8a bb       	out	0x1a, r24	; 26
	ip = 0 ;
 1dc:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__data_end>
	DDRB = 0xFF;
 1e0:	8f ef       	ldi	r24, 0xFF	; 255
 1e2:	87 bb       	out	0x17, r24	; 23
	DDRC = 0xFF;
 1e4:	84 bb       	out	0x14, r24	; 20
	
	UART_init();
 1e6:	0e 94 49 00 	call	0x92	; 0x92 <UART_init>
	
    while (1) 
    {
		if(PINA & (1<<PA0)){
 1ea:	c8 9b       	sbis	0x19, 0	; 25
 1ec:	fe cf       	rjmp	.-4      	; 0x1ea <main+0x12>
			// program starts
			
			if(PINA & (1<<PA1)){
 1ee:	c9 9b       	sbis	0x19, 1	; 25
 1f0:	03 c0       	rjmp	.+6      	; 0x1f8 <main+0x20>
				run_autopilot();
 1f2:	0e 94 c0 00 	call	0x180	; 0x180 <run_autopilot>
 1f6:	f9 cf       	rjmp	.-14     	; 0x1ea <main+0x12>
			}else{
				run_manual();
 1f8:	0e 94 99 00 	call	0x132	; 0x132 <run_manual>
 1fc:	f6 cf       	rjmp	.-20     	; 0x1ea <main+0x12>

000001fe <_exit>:
 1fe:	f8 94       	cli

00000200 <__stop_program>:
 200:	ff cf       	rjmp	.-2      	; 0x200 <__stop_program>
