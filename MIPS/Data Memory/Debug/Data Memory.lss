
Data Memory.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000132  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000186  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000186  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006c5  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ae  00000000  00000000  000008e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000274  00000000  00000000  00000e8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001104  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000343  00000000  00000000  00001168  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000013a  00000000  00000000  000014ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000015e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e3       	ldi	r30, 0x32	; 50
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 97 00 	jmp	0x12e	; 0x12e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

	return padded_str;
}

int main(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	60 97       	sbiw	r28, 0x10	; 16
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
	MCUCSR = (1<<JTD);
  a6:	80 e8       	ldi	r24, 0x80	; 128
  a8:	84 bf       	out	0x34, r24	; 52
	MCUCSR = (1<<JTD);
  aa:	84 bf       	out	0x34, r24	; 52
	
	unsigned char memory[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
  ac:	fe 01       	movw	r30, r28
  ae:	31 96       	adiw	r30, 0x01	; 1
  b0:	80 e1       	ldi	r24, 0x10	; 16
  b2:	df 01       	movw	r26, r30
  b4:	1d 92       	st	X+, r1
  b6:	8a 95       	dec	r24
  b8:	e9 f7       	brne	.-6      	; 0xb4 <main+0x22>
	
	//char upper[15];
	//char lower[15];
	//char mem[16][3];
	
	DDRA = 0xF0;
  ba:	80 ef       	ldi	r24, 0xF0	; 240
  bc:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;
  be:	9f ef       	ldi	r25, 0xFF	; 255
  c0:	97 bb       	out	0x17, r25	; 23
	DDRC = 0xFC;
  c2:	9c ef       	ldi	r25, 0xFC	; 252
  c4:	94 bb       	out	0x14, r25	; 20
	DDRD = 0xF0;
  c6:	81 bb       	out	0x11, r24	; 17
	
	PORTB = 0 ;
  c8:	18 ba       	out	0x18, r1	; 24
	//Lcd4_Init();
    
    while (1) 
    {
		// constructing command 
		PINC = PINC & 0x03;
  ca:	83 b3       	in	r24, 0x13	; 19
  cc:	83 70       	andi	r24, 0x03	; 3
  ce:	83 bb       	out	0x13, r24	; 19
		
		// construction aluResult ;
		
		PIND = PIND & 0x0F ;
  d0:	80 b3       	in	r24, 0x10	; 16
  d2:	8f 70       	andi	r24, 0x0F	; 15
  d4:	80 bb       	out	0x10, r24	; 16
		
		if(PINC == memRead){
  d6:	83 b3       	in	r24, 0x13	; 19
  d8:	81 11       	cpse	r24, r1
  da:	0b c0       	rjmp	.+22     	; 0xf2 <main+0x60>
			PORTA = memory[PIND] << 4;
  dc:	80 b3       	in	r24, 0x10	; 16
  de:	e1 e0       	ldi	r30, 0x01	; 1
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	ec 0f       	add	r30, r28
  e4:	fd 1f       	adc	r31, r29
  e6:	e8 0f       	add	r30, r24
  e8:	f1 1d       	adc	r31, r1
  ea:	80 81       	ld	r24, Z
  ec:	82 95       	swap	r24
  ee:	80 7f       	andi	r24, 0xF0	; 240
  f0:	8b bb       	out	0x1b, r24	; 27
		}
		if(PINC == memWrite){
  f2:	83 b3       	in	r24, 0x13	; 19
  f4:	81 30       	cpi	r24, 0x01	; 1
  f6:	51 f4       	brne	.+20     	; 0x10c <main+0x7a>
			memory[PIND] = PINA & 0x0F;
  f8:	90 b3       	in	r25, 0x10	; 16
  fa:	89 b3       	in	r24, 0x19	; 25
  fc:	e1 e0       	ldi	r30, 0x01	; 1
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	ec 0f       	add	r30, r28
 102:	fd 1f       	adc	r31, r29
 104:	e9 0f       	add	r30, r25
 106:	f1 1d       	adc	r31, r1
 108:	8f 70       	andi	r24, 0x0F	; 15
 10a:	80 83       	st	Z, r24
		}
		if(PINC == aluOutput){
 10c:	83 b3       	in	r24, 0x13	; 19
 10e:	82 30       	cpi	r24, 0x02	; 2
 110:	21 f4       	brne	.+8      	; 0x11a <main+0x88>
			PORTA = PIND << 4;
 112:	80 b3       	in	r24, 0x10	; 16
 114:	82 95       	swap	r24
 116:	80 7f       	andi	r24, 0xF0	; 240
 118:	8b bb       	out	0x1b, r24	; 27
		}
		
		PORTB = memory[PIND];
 11a:	80 b3       	in	r24, 0x10	; 16
 11c:	e1 e0       	ldi	r30, 0x01	; 1
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	ec 0f       	add	r30, r28
 122:	fd 1f       	adc	r31, r29
 124:	e8 0f       	add	r30, r24
 126:	f1 1d       	adc	r31, r1
 128:	80 81       	ld	r24, Z
 12a:	88 bb       	out	0x18, r24	; 24
		//sprintf(lower, "%s%s%s%s%s%s%s%s", align(itoa(memory[8], mem[8], 16)), align(itoa(memory[9], mem[9], 16)), align(itoa(memory[10], mem[10], 16)), align(itoa(memory[11], mem[11], 16)), align(itoa(memory[12], mem[12], 16)), align(itoa(memory[13], mem[13], 16)), align(itoa(memory[14], mem[14], 16)), align(itoa(memory[15], mem[15], 16)));
		//Lcd4_Set_Cursor(1,1);
		//Lcd4_Write_String(upper);
		//Lcd4_Set_Cursor(2,1);
		//Lcd4_Write_String(lower);
    }
 12c:	ce cf       	rjmp	.-100    	; 0xca <main+0x38>

0000012e <_exit>:
 12e:	f8 94       	cli

00000130 <__stop_program>:
 130:	ff cf       	rjmp	.-2      	; 0x130 <__stop_program>
